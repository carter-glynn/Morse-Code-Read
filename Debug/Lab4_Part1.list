
Lab4_Part1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d44  08005d44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  20000010  08005d5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a1c  08005d5c  00024a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172dc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe8  00000000  00000000  0003731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002da3  00000000  00000000  0003c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014afe  00000000  00000000  0003f6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000977e3  00000000  00000000  000541e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb9c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  000eba14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c80 	.word	0x08005c80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005c80 	.word	0x08005c80

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fbce 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f832 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8c4 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 f898 	bl	8000628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f002 f8fc 	bl	80026f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem1 */
  BinarySem1Handle = osSemaphoreNew(1, 1, &BinarySem1_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x50>)
 80004fe:	2101      	movs	r1, #1
 8000500:	2001      	movs	r0, #1
 8000502:	f002 f9ee 	bl	80028e2 <osSemaphoreNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <main+0x54>)
 800050a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of light1 */
  light1Handle = osThreadNew(StartLight1, NULL, &light1_attributes);
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <main+0x58>)
 800050e:	2100      	movs	r1, #0
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <main+0x5c>)
 8000512:	f002 f939 	bl	8002788 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <main+0x60>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of light2 */
  light2Handle = osThreadNew(StartLight2, NULL, &light2_attributes);
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <main+0x64>)
 800051e:	2100      	movs	r1, #0
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x68>)
 8000522:	f002 f931 	bl	8002788 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <main+0x6c>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f002 f906 	bl	800273c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x4c>
 8000532:	bf00      	nop
 8000534:	08005d14 	.word	0x08005d14
 8000538:	20000078 	.word	0x20000078
 800053c:	08005ccc 	.word	0x08005ccc
 8000540:	08000841 	.word	0x08000841
 8000544:	20000070 	.word	0x20000070
 8000548:	08005cf0 	.word	0x08005cf0
 800054c:	08000901 	.word	0x08000901
 8000550:	20000074 	.word	0x20000074

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fb84 	bl	8005c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c4:	2310      	movs	r3, #16
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fe3a 	bl	8001254 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 f9fd 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f89c 	bl	8001744 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000612:	f000 f9e7 	bl	80009e4 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 fd42 	bl	80020e8 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f9bb 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b46      	ldr	r3, [pc, #280]	; (80007b0 <MX_GPIO_Init+0x134>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <MX_GPIO_Init+0x134>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a3e      	ldr	r2, [pc, #248]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a37      	ldr	r2, [pc, #220]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a30      	ldr	r2, [pc, #192]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <MX_GPIO_Init+0x134>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BLUE_LIGHT_Pin|GREEN_LIGHT_Pin|RED_LIGHT2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8000708:	482a      	ldr	r0, [pc, #168]	; (80007b4 <MX_GPIO_Init+0x138>)
 800070a:	f000 fd65 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YELLOW_LIGHT_Pin|RED_LIGHT_Pin|GREEN_LIGHT2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000714:	4828      	ldr	r0, [pc, #160]	; (80007b8 <MX_GPIO_Init+0x13c>)
 8000716:	f000 fd5f 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LIGHT2_GPIO_Port, YELLOW_LIGHT2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	4827      	ldr	r0, [pc, #156]	; (80007bc <MX_GPIO_Init+0x140>)
 8000720:	f000 fd5a 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4820      	ldr	r0, [pc, #128]	; (80007bc <MX_GPIO_Init+0x140>)
 800073c:	f000 fbc8 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BLUE_LIGHT_Pin GREEN_LIGHT_Pin RED_LIGHT2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BLUE_LIGHT_Pin|GREEN_LIGHT_Pin|RED_LIGHT2_Pin;
 8000740:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <MX_GPIO_Init+0x138>)
 800075a:	f000 fbb9 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_LIGHT_Pin RED_LIGHT_Pin GREEN_LIGHT2_Pin */
  GPIO_InitStruct.Pin = YELLOW_LIGHT_Pin|RED_LIGHT_Pin|GREEN_LIGHT2_Pin;
 800075e:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x13c>)
 8000778:	f000 fbaa 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LIGHT2_Pin */
  GPIO_InitStruct.Pin = YELLOW_LIGHT2_Pin;
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YELLOW_LIGHT2_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <MX_GPIO_Init+0x140>)
 8000794:	f000 fb9c 	bl	8000ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2105      	movs	r1, #5
 800079c:	2028      	movs	r0, #40	; 0x28
 800079e:	f000 fb6d 	bl	8000e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f000 fb86 	bl	8000eb4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020800 	.word	0x40020800

080007c0 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */
int buttonPress = 0;
/* USER CODE END 4 */
void EXTI15_10_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	buttonPress = 1;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <EXTI15_10_IRQHandler+0x18>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007ce:	f000 fd1d 	bl	800120c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000007c 	.word	0x2000007c

080007dc <StartCrossing>:
void StartCrossing() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, BLUE_LIGHT_Pin, GPIO_PIN_SET);		// BLUE turned on
 80007e2:	2201      	movs	r2, #1
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <StartCrossing+0x60>)
 80007e8:	f000 fcf6 	bl	80011d8 <HAL_GPIO_WritePin>
	  osDelay(2000);
 80007ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f0:	f002 f85c 	bl	80028ac <osDelay>
	  HAL_GPIO_WritePin(GPIOA, BLUE_LIGHT_Pin, GPIO_PIN_RESET);		// BLUE turned off
 80007f4:	2200      	movs	r2, #0
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <StartCrossing+0x60>)
 80007fa:	f000 fced 	bl	80011d8 <HAL_GPIO_WritePin>

	  /* Flashes on and off for 2s */
	  int count = 4;
 80007fe:	2304      	movs	r3, #4
 8000800:	607b      	str	r3, [r7, #4]
	  while(count > 0) {
 8000802:	e012      	b.n	800082a <StartCrossing+0x4e>
		  HAL_GPIO_WritePin(GPIOA, BLUE_LIGHT_Pin, GPIO_PIN_SET);	// BLUE turned on
 8000804:	2201      	movs	r2, #1
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <StartCrossing+0x60>)
 800080a:	f000 fce5 	bl	80011d8 <HAL_GPIO_WritePin>
		  osDelay(250);												// 0.25s delay
 800080e:	20fa      	movs	r0, #250	; 0xfa
 8000810:	f002 f84c 	bl	80028ac <osDelay>
		  HAL_GPIO_WritePin(GPIOA, BLUE_LIGHT_Pin, GPIO_PIN_RESET);	// BLUE turned off
 8000814:	2200      	movs	r2, #0
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <StartCrossing+0x60>)
 800081a:	f000 fcdd 	bl	80011d8 <HAL_GPIO_WritePin>
		  osDelay(250);
 800081e:	20fa      	movs	r0, #250	; 0xfa
 8000820:	f002 f844 	bl	80028ac <osDelay>
		  count--;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
	  while(count > 0) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dce9      	bgt.n	8000804 <StartCrossing+0x28>
	  }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000

08000840 <StartLight1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLight1 */
void StartLight1(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOA, RED_LIGHT2_Pin, GPIO_PIN_SET); // initially sets RED2 to be on
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084e:	4828      	ldr	r0, [pc, #160]	; (80008f0 <StartLight1+0xb0>)
 8000850:	f000 fcc2 	bl	80011d8 <HAL_GPIO_WritePin>
		  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BinarySem1Handle, osWaitForever); 	// waits forever for semaphore to become available
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <StartLight1+0xb4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f8c9 	bl	80029f4 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(GPIOB, RED_LIGHT_Pin, GPIO_PIN_RESET);		// RED1 turned off
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	4824      	ldr	r0, [pc, #144]	; (80008f8 <StartLight1+0xb8>)
 8000868:	f000 fcb6 	bl	80011d8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GREEN_LIGHT_Pin, GPIO_PIN_SET);		// GREEN1 turned on
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	481f      	ldr	r0, [pc, #124]	; (80008f0 <StartLight1+0xb0>)
 8000874:	f000 fcb0 	bl	80011d8 <HAL_GPIO_WritePin>
	  if (buttonPress == 1){
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <StartLight1+0xbc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10b      	bne.n	8000898 <StartLight1+0x58>
	  	StartCrossing();
 8000880:	f7ff ffac 	bl	80007dc <StartCrossing>
	  	buttonPress = 0;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <StartLight1+0xbc>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
	  	HAL_GPIO_WritePin(GPIOA, GREEN_LIGHT_Pin, GPIO_PIN_RESET);	// GREEN1 turned off
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000890:	4817      	ldr	r0, [pc, #92]	; (80008f0 <StartLight1+0xb0>)
 8000892:	f000 fca1 	bl	80011d8 <HAL_GPIO_WritePin>
 8000896:	e009      	b.n	80008ac <StartLight1+0x6c>
	  } else {
		  osDelay(4000);												// 4s delay
 8000898:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800089c:	f002 f806 	bl	80028ac <osDelay>
		  HAL_GPIO_WritePin(GPIOA, GREEN_LIGHT_Pin, GPIO_PIN_RESET);	// GREEN1 turned off
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <StartLight1+0xb0>)
 80008a8:	f000 fc96 	bl	80011d8 <HAL_GPIO_WritePin>
	  }

	  HAL_GPIO_WritePin(GPIOB, YELLOW_LIGHT_Pin, GPIO_PIN_SET);		// YELLOW1 turned on
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <StartLight1+0xb8>)
 80008b4:	f000 fc90 	bl	80011d8 <HAL_GPIO_WritePin>
	  osDelay(1500);												// 1.5s delay
 80008b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008bc:	f001 fff6 	bl	80028ac <osDelay>
	  HAL_GPIO_WritePin(GPIOB, YELLOW_LIGHT_Pin, GPIO_PIN_RESET);	// YELLOW1 turned off
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <StartLight1+0xb8>)
 80008c8:	f000 fc86 	bl	80011d8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, RED_LIGHT_Pin, GPIO_PIN_SET);		// RED1 turned on
 80008cc:	2201      	movs	r2, #1
 80008ce:	2110      	movs	r1, #16
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <StartLight1+0xb8>)
 80008d2:	f000 fc81 	bl	80011d8 <HAL_GPIO_WritePin>
	  osDelay(1000);												// 1s delay
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f001 ffe7 	bl	80028ac <osDelay>

	  osSemaphoreRelease(BinarySem1Handle);		//releases semaphore for next task
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <StartLight1+0xb4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f8d8 	bl	8002a98 <osSemaphoreRelease>
	  osDelay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f001 ffdf 	bl	80028ac <osDelay>
	  osSemaphoreAcquire(BinarySem1Handle, osWaitForever); 	// waits forever for semaphore to become available
 80008ee:	e7b1      	b.n	8000854 <StartLight1+0x14>
 80008f0:	40020000 	.word	0x40020000
 80008f4:	20000078 	.word	0x20000078
 80008f8:	40020400 	.word	0x40020400
 80008fc:	2000007c 	.word	0x2000007c

08000900 <StartLight2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLight2 */
void StartLight2(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLight2 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BinarySem1Handle, osWaitForever); 	// waits forever for semaphore to become available
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <StartLight2+0xac>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	4618      	mov	r0, r3
 8000912:	f002 f86f 	bl	80029f4 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(GPIOA, RED_LIGHT2_Pin, GPIO_PIN_RESET);		// RED2 turned off
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <StartLight2+0xb0>)
 800091e:	f000 fc5b 	bl	80011d8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GREEN_LIGHT2_Pin, GPIO_PIN_SET);		// GREEN2 turned on
 8000922:	2201      	movs	r2, #1
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	4823      	ldr	r0, [pc, #140]	; (80009b4 <StartLight2+0xb4>)
 8000928:	f000 fc56 	bl	80011d8 <HAL_GPIO_WritePin>
	  if (buttonPress == 1){
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <StartLight2+0xb8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10b      	bne.n	800094c <StartLight2+0x4c>
			StartCrossing();
 8000934:	f7ff ff52 	bl	80007dc <StartCrossing>
			buttonPress = 0;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <StartLight2+0xb8>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GREEN_LIGHT_Pin, GPIO_PIN_RESET);	// GREEN1 turned off
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <StartLight2+0xb0>)
 8000946:	f000 fc47 	bl	80011d8 <HAL_GPIO_WritePin>
 800094a:	e009      	b.n	8000960 <StartLight2+0x60>
	  } else {
			osDelay(4000);												// 4s delay
 800094c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000950:	f001 ffac 	bl	80028ac <osDelay>
			HAL_GPIO_WritePin(GPIOA, GREEN_LIGHT_Pin, GPIO_PIN_RESET);	// GREEN1 turned off
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095a:	4815      	ldr	r0, [pc, #84]	; (80009b0 <StartLight2+0xb0>)
 800095c:	f000 fc3c 	bl	80011d8 <HAL_GPIO_WritePin>
	  }											// 4s delay
	  HAL_GPIO_WritePin(GPIOB, GREEN_LIGHT2_Pin, GPIO_PIN_RESET);	// GREEN2 turned off
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <StartLight2+0xb4>)
 8000966:	f000 fc37 	bl	80011d8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(YELLOW_LIGHT2_GPIO_Port, YELLOW_LIGHT2_Pin, GPIO_PIN_SET);	// YELLOW2 turned on
 800096a:	2201      	movs	r2, #1
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <StartLight2+0xbc>)
 8000970:	f000 fc32 	bl	80011d8 <HAL_GPIO_WritePin>
	  osDelay(1500);												// 1.5s delay
 8000974:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000978:	f001 ff98 	bl	80028ac <osDelay>
	  HAL_GPIO_WritePin(YELLOW_LIGHT2_GPIO_Port, YELLOW_LIGHT2_Pin, GPIO_PIN_RESET);	// YELLOW2 turned off
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	480e      	ldr	r0, [pc, #56]	; (80009bc <StartLight2+0xbc>)
 8000982:	f000 fc29 	bl	80011d8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, RED_LIGHT2_Pin, GPIO_PIN_SET);		// RED2 turned on
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <StartLight2+0xb0>)
 800098e:	f000 fc23 	bl	80011d8 <HAL_GPIO_WritePin>
	  osDelay(1000);												// 7.5s delay to give other task time to complete
 8000992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000996:	f001 ff89 	bl	80028ac <osDelay>

	  osSemaphoreRelease(BinarySem1Handle);		//releases semaphore for next task
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <StartLight2+0xac>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 f87a 	bl	8002a98 <osSemaphoreRelease>
	  osDelay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f001 ff81 	bl	80028ac <osDelay>
	  osSemaphoreAcquire(BinarySem1Handle, osWaitForever); 	// waits forever for semaphore to become available
 80009aa:	e7ad      	b.n	8000908 <StartLight2+0x8>
 80009ac:	20000078 	.word	0x20000078
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	2000007c 	.word	0x2000007c
 80009bc:	40020800 	.word	0x40020800

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f97b 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40000c00 	.word	0x40000c00

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <HAL_MspInit+0x54>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_MspInit+0x54>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	210f      	movs	r1, #15
 8000a32:	f06f 0001 	mvn.w	r0, #1
 8000a36:	f000 fa21 	bl	8000e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x8c>)
 8000abe:	f000 fa07 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <HAL_InitTick+0xe4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a32      	ldr	r2, [pc, #200]	; (8000bbc <HAL_InitTick+0xe4>)
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <HAL_InitTick+0xe4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b04:	f107 0210 	add.w	r2, r7, #16
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f838 	bl	8001b84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b1e:	f001 f809 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000b22:	6378      	str	r0, [r7, #52]	; 0x34
 8000b24:	e004      	b.n	8000b30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b26:	f001 f805 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b32:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <HAL_InitTick+0xe8>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	0c9b      	lsrs	r3, r3, #18
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <HAL_InitTick+0xf0>)
 8000b42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b50:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b66:	f001 f83f 	bl	8001be8 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11b      	bne.n	8000bb0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <HAL_InitTick+0xec>)
 8000b7a:	f001 f88f 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d111      	bne.n	8000bb0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b8c:	2032      	movs	r0, #50	; 0x32
 8000b8e:	f000 f991 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d808      	bhi.n	8000baa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2032      	movs	r0, #50	; 0x32
 8000b9e:	f000 f96d 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0xf4>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e002      	b.n	8000bb0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	431bde83 	.word	0x431bde83
 8000bc4:	20000080 	.word	0x20000080
 8000bc8:	40000c00 	.word	0x40000c00
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM5_IRQHandler+0x10>)
 8000c02:	f001 f8ad 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000080 	.word	0x20000080

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f004 ffd3 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc3d 	bl	80004e4 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c78:	08005d4c 	.word	0x08005d4c
  ldr r2, =_sbss
 8000c7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c80:	20004a1c 	.word	0x20004a1c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8d8 	bl	8000e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff ff0e 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe98 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200000c8 	.word	0x200000c8

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200000c8 	.word	0x200000c8

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff4c 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8e:	f7ff ff61 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f7ff ffb1 	bl	8000e00 <NVIC_EncodePriority>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff80 	bl	8000dac <__NVIC_SetPriority>
}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff54 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e159      	b.n	80011a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8148 	bne.w	800119a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d005      	beq.n	8000f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	69b9      	ldr	r1, [r7, #24]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a2 	beq.w	800119a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a52      	ldr	r2, [pc, #328]	; (80011bc <HAL_GPIO_Init+0x2ec>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a49      	ldr	r2, [pc, #292]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x202>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_GPIO_Init+0x2f4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1fe>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <HAL_GPIO_Init+0x2f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_GPIO_Init+0x2fc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1f6>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_GPIO_Init+0x300>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1f2>
 80010be:	2304      	movs	r3, #4
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010d2:	2300      	movs	r3, #0
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2ec>)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <HAL_GPIO_Init+0x304>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x304>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116a:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x304>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x304>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3301      	adds	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	f67f aea2 	bls.w	8000eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f806 	bl	800123c <HAL_GPIO_EXTI_Callback>
  }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcf2 	bl	8000cf4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcee 	bl	8000cf4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fcde 	bl	8000cf4 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fcda 	bl	8000cf4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc93 	bl	8000cf4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc8f 	bl	8000cf4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc72 	bl	8000cf4 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc6e 	bl	8000cf4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc52 	bl	8000cf4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc4e 	bl	8000cf4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc3b 	bl	8000cf4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc37 	bl	8000cf4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbf7 	bl	8000cf4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbf3 	bl	8000cf4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fbb8 	bl	8000cf4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fbb4 	bl	8000cf4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fba2 	bl	8000cf4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb9e 	bl	8000cf4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb72 	bl	8000cf4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb6e 	bl	8000cf4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb47 	bl	8000cf4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb43 	bl	8000cf4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb30 	bl	8000cf4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb2c 	bl	8000cf4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa5e 	bl	8000cf4 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa5a 	bl	8000cf4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f8f4 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08005d24 	.word	0x08005d24
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	; 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a20:	f7fe fbde 	bl	80001e0 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fb84 	bl	80001e0 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08005d34 	.word	0x08005d34

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08005d34 	.word	0x08005d34

08001b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	220f      	movs	r2, #15
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_RCC_GetClockConfig+0x60>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0207 	and.w	r2, r3, #7
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9ca 	bl	8001fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e044      	b.n	8001d3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_TIM_Base_Start_IT+0xb0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d018      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x6c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d013      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x6c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d009      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d010      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	e007      	b.n	8001d3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40014000 	.word	0x40014000

08001d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0202 	mvn.w	r2, #2
 8001d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8ee 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8e0 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8f1 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0204 	mvn.w	r2, #4
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8c4 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8b6 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8c7 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0208 	mvn.w	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89a 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f88c 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f89d 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f870 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f862 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f873 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0201 	mvn.w	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fd6e 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8e2 	bl	80020d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f838 	bl	8001fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0220 	mvn.w	r2, #32
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8ac 	bl	80020c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <TIM_Base_SetConfig+0xe4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <TIM_Base_SetConfig+0xe8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <TIM_Base_SetConfig+0xec>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <TIM_Base_SetConfig+0xf0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <TIM_Base_SetConfig+0xe4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01b      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d017      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <TIM_Base_SetConfig+0xe8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a21      	ldr	r2, [pc, #132]	; (80020ac <TIM_Base_SetConfig+0xec>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00f      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <TIM_Base_SetConfig+0xf0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00b      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <TIM_Base_SetConfig+0xf4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <TIM_Base_SetConfig+0xf8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <TIM_Base_SetConfig+0xfc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <TIM_Base_SetConfig+0xe4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d103      	bne.n	8002090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800

080020c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e03f      	b.n	800217a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fc9a 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f829 	bl	8002184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002188:	b0c0      	sub	sp, #256	; 0x100
 800218a:	af00      	add	r7, sp, #0
 800218c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	ea40 0301 	orr.w	r3, r0, r1
 80021ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021dc:	f021 010c 	bic.w	r1, r1, #12
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021ea:	430b      	orrs	r3, r1
 80021ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fe:	6999      	ldr	r1, [r3, #24]
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	ea40 0301 	orr.w	r3, r0, r1
 800220a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b8f      	ldr	r3, [pc, #572]	; (8002450 <UART_SetConfig+0x2cc>)
 8002214:	429a      	cmp	r2, r3
 8002216:	d005      	beq.n	8002224 <UART_SetConfig+0xa0>
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b8d      	ldr	r3, [pc, #564]	; (8002454 <UART_SetConfig+0x2d0>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d104      	bne.n	800222e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002224:	f7ff fc9a 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800222c:	e003      	b.n	8002236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800222e:	f7ff fc81 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8002232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002240:	f040 810c 	bne.w	800245c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002248:	2200      	movs	r2, #0
 800224a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800224e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002256:	4622      	mov	r2, r4
 8002258:	462b      	mov	r3, r5
 800225a:	1891      	adds	r1, r2, r2
 800225c:	65b9      	str	r1, [r7, #88]	; 0x58
 800225e:	415b      	adcs	r3, r3
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002266:	4621      	mov	r1, r4
 8002268:	eb12 0801 	adds.w	r8, r2, r1
 800226c:	4629      	mov	r1, r5
 800226e:	eb43 0901 	adc.w	r9, r3, r1
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800227e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002286:	4690      	mov	r8, r2
 8002288:	4699      	mov	r9, r3
 800228a:	4623      	mov	r3, r4
 800228c:	eb18 0303 	adds.w	r3, r8, r3
 8002290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002294:	462b      	mov	r3, r5
 8002296:	eb49 0303 	adc.w	r3, r9, r3
 800229a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800229e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022b2:	460b      	mov	r3, r1
 80022b4:	18db      	adds	r3, r3, r3
 80022b6:	653b      	str	r3, [r7, #80]	; 0x50
 80022b8:	4613      	mov	r3, r2
 80022ba:	eb42 0303 	adc.w	r3, r2, r3
 80022be:	657b      	str	r3, [r7, #84]	; 0x54
 80022c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022c8:	f7fd ff8a 	bl	80001e0 <__aeabi_uldivmod>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <UART_SetConfig+0x2d4>)
 80022d2:	fba3 2302 	umull	r2, r3, r3, r2
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	011c      	lsls	r4, r3, #4
 80022da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022de:	2200      	movs	r2, #0
 80022e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022ec:	4642      	mov	r2, r8
 80022ee:	464b      	mov	r3, r9
 80022f0:	1891      	adds	r1, r2, r2
 80022f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80022f4:	415b      	adcs	r3, r3
 80022f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022fc:	4641      	mov	r1, r8
 80022fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002302:	4649      	mov	r1, r9
 8002304:	eb43 0b01 	adc.w	fp, r3, r1
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231c:	4692      	mov	sl, r2
 800231e:	469b      	mov	fp, r3
 8002320:	4643      	mov	r3, r8
 8002322:	eb1a 0303 	adds.w	r3, sl, r3
 8002326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800232a:	464b      	mov	r3, r9
 800232c:	eb4b 0303 	adc.w	r3, fp, r3
 8002330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002348:	460b      	mov	r3, r1
 800234a:	18db      	adds	r3, r3, r3
 800234c:	643b      	str	r3, [r7, #64]	; 0x40
 800234e:	4613      	mov	r3, r2
 8002350:	eb42 0303 	adc.w	r3, r2, r3
 8002354:	647b      	str	r3, [r7, #68]	; 0x44
 8002356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800235a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800235e:	f7fd ff3f 	bl	80001e0 <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4611      	mov	r1, r2
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <UART_SetConfig+0x2d4>)
 800236a:	fba3 2301 	umull	r2, r3, r3, r1
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2264      	movs	r2, #100	; 0x64
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	1acb      	subs	r3, r1, r3
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <UART_SetConfig+0x2d4>)
 8002380:	fba3 2302 	umull	r2, r3, r3, r2
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800238c:	441c      	add	r4, r3
 800238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800239c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023a0:	4642      	mov	r2, r8
 80023a2:	464b      	mov	r3, r9
 80023a4:	1891      	adds	r1, r2, r2
 80023a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80023a8:	415b      	adcs	r3, r3
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023b0:	4641      	mov	r1, r8
 80023b2:	1851      	adds	r1, r2, r1
 80023b4:	6339      	str	r1, [r7, #48]	; 0x30
 80023b6:	4649      	mov	r1, r9
 80023b8:	414b      	adcs	r3, r1
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023c8:	4659      	mov	r1, fp
 80023ca:	00cb      	lsls	r3, r1, #3
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d2:	4651      	mov	r1, sl
 80023d4:	00ca      	lsls	r2, r1, #3
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	4642      	mov	r2, r8
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023e4:	464b      	mov	r3, r9
 80023e6:	460a      	mov	r2, r1
 80023e8:	eb42 0303 	adc.w	r3, r2, r3
 80023ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002404:	460b      	mov	r3, r1
 8002406:	18db      	adds	r3, r3, r3
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
 800240a:	4613      	mov	r3, r2
 800240c:	eb42 0303 	adc.w	r3, r2, r3
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800241a:	f7fd fee1 	bl	80001e0 <__aeabi_uldivmod>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <UART_SetConfig+0x2d4>)
 8002424:	fba3 1302 	umull	r1, r3, r3, r2
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	2164      	movs	r1, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	3332      	adds	r3, #50	; 0x32
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <UART_SetConfig+0x2d4>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4422      	add	r2, r4
 800244a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800244c:	e105      	b.n	800265a <UART_SetConfig+0x4d6>
 800244e:	bf00      	nop
 8002450:	40011000 	.word	0x40011000
 8002454:	40011400 	.word	0x40011400
 8002458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800245c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002460:	2200      	movs	r2, #0
 8002462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800246a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800246e:	4642      	mov	r2, r8
 8002470:	464b      	mov	r3, r9
 8002472:	1891      	adds	r1, r2, r2
 8002474:	6239      	str	r1, [r7, #32]
 8002476:	415b      	adcs	r3, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800247e:	4641      	mov	r1, r8
 8002480:	1854      	adds	r4, r2, r1
 8002482:	4649      	mov	r1, r9
 8002484:	eb43 0501 	adc.w	r5, r3, r1
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	00eb      	lsls	r3, r5, #3
 8002492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002496:	00e2      	lsls	r2, r4, #3
 8002498:	4614      	mov	r4, r2
 800249a:	461d      	mov	r5, r3
 800249c:	4643      	mov	r3, r8
 800249e:	18e3      	adds	r3, r4, r3
 80024a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024a4:	464b      	mov	r3, r9
 80024a6:	eb45 0303 	adc.w	r3, r5, r3
 80024aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024ca:	4629      	mov	r1, r5
 80024cc:	008b      	lsls	r3, r1, #2
 80024ce:	4621      	mov	r1, r4
 80024d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d4:	4621      	mov	r1, r4
 80024d6:	008a      	lsls	r2, r1, #2
 80024d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024dc:	f7fd fe80 	bl	80001e0 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4b60      	ldr	r3, [pc, #384]	; (8002668 <UART_SetConfig+0x4e4>)
 80024e6:	fba3 2302 	umull	r2, r3, r3, r2
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	011c      	lsls	r4, r3, #4
 80024ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002500:	4642      	mov	r2, r8
 8002502:	464b      	mov	r3, r9
 8002504:	1891      	adds	r1, r2, r2
 8002506:	61b9      	str	r1, [r7, #24]
 8002508:	415b      	adcs	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002510:	4641      	mov	r1, r8
 8002512:	1851      	adds	r1, r2, r1
 8002514:	6139      	str	r1, [r7, #16]
 8002516:	4649      	mov	r1, r9
 8002518:	414b      	adcs	r3, r1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002528:	4659      	mov	r1, fp
 800252a:	00cb      	lsls	r3, r1, #3
 800252c:	4651      	mov	r1, sl
 800252e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002532:	4651      	mov	r1, sl
 8002534:	00ca      	lsls	r2, r1, #3
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	4603      	mov	r3, r0
 800253c:	4642      	mov	r2, r8
 800253e:	189b      	adds	r3, r3, r2
 8002540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002544:	464b      	mov	r3, r9
 8002546:	460a      	mov	r2, r1
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	67bb      	str	r3, [r7, #120]	; 0x78
 800255a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002568:	4649      	mov	r1, r9
 800256a:	008b      	lsls	r3, r1, #2
 800256c:	4641      	mov	r1, r8
 800256e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002572:	4641      	mov	r1, r8
 8002574:	008a      	lsls	r2, r1, #2
 8002576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800257a:	f7fd fe31 	bl	80001e0 <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <UART_SetConfig+0x4e4>)
 8002584:	fba3 1302 	umull	r1, r3, r3, r2
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	2164      	movs	r1, #100	; 0x64
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	3332      	adds	r3, #50	; 0x32
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <UART_SetConfig+0x4e4>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a2:	441c      	add	r4, r3
 80025a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a8:	2200      	movs	r2, #0
 80025aa:	673b      	str	r3, [r7, #112]	; 0x70
 80025ac:	677a      	str	r2, [r7, #116]	; 0x74
 80025ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	1891      	adds	r1, r2, r2
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	415b      	adcs	r3, r3
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c2:	4641      	mov	r1, r8
 80025c4:	1851      	adds	r1, r2, r1
 80025c6:	6039      	str	r1, [r7, #0]
 80025c8:	4649      	mov	r1, r9
 80025ca:	414b      	adcs	r3, r1
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025da:	4659      	mov	r1, fp
 80025dc:	00cb      	lsls	r3, r1, #3
 80025de:	4651      	mov	r1, sl
 80025e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e4:	4651      	mov	r1, sl
 80025e6:	00ca      	lsls	r2, r1, #3
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	4642      	mov	r2, r8
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80025f4:	464b      	mov	r3, r9
 80025f6:	460a      	mov	r2, r1
 80025f8:	eb42 0303 	adc.w	r3, r2, r3
 80025fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	663b      	str	r3, [r7, #96]	; 0x60
 8002608:	667a      	str	r2, [r7, #100]	; 0x64
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002616:	4649      	mov	r1, r9
 8002618:	008b      	lsls	r3, r1, #2
 800261a:	4641      	mov	r1, r8
 800261c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002620:	4641      	mov	r1, r8
 8002622:	008a      	lsls	r2, r1, #2
 8002624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002628:	f7fd fdda 	bl	80001e0 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <UART_SetConfig+0x4e4>)
 8002632:	fba3 1302 	umull	r1, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2164      	movs	r1, #100	; 0x64
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	3332      	adds	r3, #50	; 0x32
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <UART_SetConfig+0x4e4>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	f003 020f 	and.w	r2, r3, #15
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4422      	add	r2, r4
 8002658:	609a      	str	r2, [r3, #8]
}
 800265a:	bf00      	nop
 800265c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
 8002668:	51eb851f 	.word	0x51eb851f

0800266c <__NVIC_SetPriority>:
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Handler+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026c8:	f002 f93e 	bl	8004948 <xTaskGetSchedulerState>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026d2:	f003 f821 	bl	8005718 <xPortSysTickHandler>
  }
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026e4:	2100      	movs	r1, #0
 80026e6:	f06f 0004 	mvn.w	r0, #4
 80026ea:	f7ff ffbf 	bl	800266c <__NVIC_SetPriority>
#endif
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026fa:	f3ef 8305 	mrs	r3, IPSR
 80026fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002706:	f06f 0305 	mvn.w	r3, #5
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e00c      	b.n	8002728 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <osKernelInitialize+0x44>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <osKernelInitialize+0x44>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e002      	b.n	8002728 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002728:	687b      	ldr	r3, [r7, #4]
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200000cc 	.word	0x200000cc

0800273c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002742:	f3ef 8305 	mrs	r3, IPSR
 8002746:	603b      	str	r3, [r7, #0]
  return(result);
 8002748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <osKernelStart+0x1a>
    stat = osErrorISR;
 800274e:	f06f 0305 	mvn.w	r3, #5
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	e010      	b.n	8002778 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <osKernelStart+0x48>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d109      	bne.n	8002772 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800275e:	f7ff ffbf 	bl	80026e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <osKernelStart+0x48>)
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002768:	f001 fca6 	bl	80040b8 <vTaskStartScheduler>
      stat = osOK;
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	e002      	b.n	8002778 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200000cc 	.word	0x200000cc

08002788 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b08e      	sub	sp, #56	; 0x38
 800278c:	af04      	add	r7, sp, #16
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002798:	f3ef 8305 	mrs	r3, IPSR
 800279c:	617b      	str	r3, [r7, #20]
  return(result);
 800279e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d17e      	bne.n	80028a2 <osThreadNew+0x11a>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d07b      	beq.n	80028a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027ae:	2318      	movs	r3, #24
 80027b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d045      	beq.n	800284e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <osThreadNew+0x48>
        name = attr->name;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <osThreadNew+0x6e>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b38      	cmp	r3, #56	; 0x38
 80027e8:	d805      	bhi.n	80027f6 <osThreadNew+0x6e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <osThreadNew+0x72>
        return (NULL);
 80027f6:	2300      	movs	r3, #0
 80027f8:	e054      	b.n	80028a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <osThreadNew+0xa8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b5b      	cmp	r3, #91	; 0x5b
 8002818:	d90a      	bls.n	8002830 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <osThreadNew+0xa8>
        mem = 1;
 800282a:	2301      	movs	r3, #1
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e010      	b.n	8002852 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <osThreadNew+0xca>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <osThreadNew+0xca>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <osThreadNew+0xca>
          mem = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e001      	b.n	8002852 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d110      	bne.n	800287a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002860:	9202      	str	r2, [sp, #8]
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 fa4c 	bl	8003d0c <xTaskCreateStatic>
 8002874:	4603      	mov	r3, r0
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e013      	b.n	80028a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d110      	bne.n	80028a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	b29a      	uxth	r2, r3
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f001 fa97 	bl	8003dc6 <xTaskCreate>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d001      	beq.n	80028a2 <osThreadNew+0x11a>
            hTask = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028a2:	693b      	ldr	r3, [r7, #16]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b4:	f3ef 8305 	mrs	r3, IPSR
 80028b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80028ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <osDelay+0x1c>
    stat = osErrorISR;
 80028c0:	f06f 0305 	mvn.w	r3, #5
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e007      	b.n	80028d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f001 fbbc 	bl	8004050 <vTaskDelay>
    }
  }

  return (stat);
 80028d8:	68fb      	ldr	r3, [r7, #12]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08a      	sub	sp, #40	; 0x28
 80028e6:	af02      	add	r7, sp, #8
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f2:	f3ef 8305 	mrs	r3, IPSR
 80028f6:	613b      	str	r3, [r7, #16]
  return(result);
 80028f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d175      	bne.n	80029ea <osSemaphoreNew+0x108>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d072      	beq.n	80029ea <osSemaphoreNew+0x108>
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d86e      	bhi.n	80029ea <osSemaphoreNew+0x108>
    mem = -1;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <osSemaphoreNew+0x4c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b4f      	cmp	r3, #79	; 0x4f
 8002926:	d902      	bls.n	800292e <osSemaphoreNew+0x4c>
        mem = 1;
 8002928:	2301      	movs	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e00c      	b.n	8002948 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <osSemaphoreNew+0x66>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d104      	bne.n	8002948 <osSemaphoreNew+0x66>
          mem = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	e001      	b.n	8002948 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d04c      	beq.n	80029ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d128      	bne.n	80029a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10a      	bne.n	8002972 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2203      	movs	r2, #3
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2001      	movs	r0, #1
 800296a:	f000 fa29 	bl	8002dc0 <xQueueGenericCreateStatic>
 800296e:	61f8      	str	r0, [r7, #28]
 8002970:	e005      	b.n	800297e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002972:	2203      	movs	r2, #3
 8002974:	2100      	movs	r1, #0
 8002976:	2001      	movs	r0, #1
 8002978:	f000 fa9a 	bl	8002eb0 <xQueueGenericCreate>
 800297c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d022      	beq.n	80029ca <osSemaphoreNew+0xe8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01f      	beq.n	80029ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800298a:	2300      	movs	r3, #0
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	69f8      	ldr	r0, [r7, #28]
 8002992:	f000 fb55 	bl	8003040 <xQueueGenericSend>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d016      	beq.n	80029ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800299c:	69f8      	ldr	r0, [r7, #28]
 800299e:	f000 ffe1 	bl	8003964 <vQueueDelete>
            hSemaphore = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e010      	b.n	80029ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fad7 	bl	8002f6a <xQueueCreateCountingSemaphoreStatic>
 80029bc:	61f8      	str	r0, [r7, #28]
 80029be:	e004      	b.n	80029ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fb08 	bl	8002fd8 <xQueueCreateCountingSemaphore>
 80029c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <osSemaphoreNew+0xfc>
          name = attr->name;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e001      	b.n	80029e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80029e2:	6979      	ldr	r1, [r7, #20]
 80029e4:	69f8      	ldr	r0, [r7, #28]
 80029e6:	f001 f909 	bl	8003bfc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80029ea:	69fb      	ldr	r3, [r7, #28]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002a0c:	f06f 0303 	mvn.w	r3, #3
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e039      	b.n	8002a88 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a14:	f3ef 8305 	mrs	r3, IPSR
 8002a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d022      	beq.n	8002a66 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002a26:	f06f 0303 	mvn.w	r3, #3
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e02c      	b.n	8002a88 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	461a      	mov	r2, r3
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6938      	ldr	r0, [r7, #16]
 8002a3c:	f000 ff12 	bl	8003864 <xQueueReceiveFromISR>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d003      	beq.n	8002a4e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002a46:	f06f 0302 	mvn.w	r3, #2
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e01c      	b.n	8002a88 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d019      	beq.n	8002a88 <osSemaphoreAcquire+0x94>
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <osSemaphoreAcquire+0xa0>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	e010      	b.n	8002a88 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	6938      	ldr	r0, [r7, #16]
 8002a6a:	f000 fdef 	bl	800364c <xQueueSemaphoreTake>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d009      	beq.n	8002a88 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002a7a:	f06f 0301 	mvn.w	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e002      	b.n	8002a88 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002a82:	f06f 0302 	mvn.w	r3, #2
 8002a86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002a88:	697b      	ldr	r3, [r7, #20]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002aae:	f06f 0303 	mvn.w	r3, #3
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e02c      	b.n	8002b10 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab6:	f3ef 8305 	mrs	r3, IPSR
 8002aba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002abc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01a      	beq.n	8002af8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	4619      	mov	r1, r3
 8002acc:	6938      	ldr	r0, [r7, #16]
 8002ace:	f000 fc50 	bl	8003372 <xQueueGiveFromISR>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d003      	beq.n	8002ae0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002ad8:	f06f 0302 	mvn.w	r3, #2
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e017      	b.n	8002b10 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <osSemaphoreRelease+0x78>
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <osSemaphoreRelease+0x84>)
 8002ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	e00b      	b.n	8002b10 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002af8:	2300      	movs	r3, #0
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	6938      	ldr	r0, [r7, #16]
 8002b00:	f000 fa9e 	bl	8003040 <xQueueGenericSend>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002b0a:	f06f 0302 	mvn.w	r3, #2
 8002b0e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002b10:	697b      	ldr	r3, [r7, #20]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8002b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <vApplicationGetIdleTaskMemory+0x30>)
 8002b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	601a      	str	r2, [r3, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	200000d0 	.word	0x200000d0
 8002b50:	2000012c 	.word	0x2000012c

08002b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <vApplicationGetTimerTaskMemory+0x30>)
 8002b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	2000032c 	.word	0x2000032c
 8002b84:	20000388 	.word	0x20000388

08002b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f103 0208 	add.w	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0208 	add.w	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 0208 	add.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d103      	bne.n	8002c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e00c      	b.n	8002c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e002      	b.n	8002c58 <vListInsert+0x2e>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d2f6      	bcs.n	8002c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6852      	ldr	r2, [r2, #4]
 8002cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d103      	bne.n	8002cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1e5a      	subs	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d1a:	f002 fc6b 	bl	80055f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d114      	bne.n	8002d9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01a      	beq.n	8002dae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3310      	adds	r3, #16
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fc25 	bl	80045cc <xTaskRemoveFromEventList>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <xQueueGenericReset+0xcc>)
 8002d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	e009      	b.n	8002dae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3310      	adds	r3, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fef2 	bl	8002b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3324      	adds	r3, #36	; 0x24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff feed 	bl	8002b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dae:	f002 fc51 	bl	8005654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e02:	bf00      	nop
 8002e04:	e7fe      	b.n	8002e04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <xQueueGenericCreateStatic+0x52>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <xQueueGenericCreateStatic+0x56>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <xQueueGenericCreateStatic+0x58>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	e7fe      	b.n	8002e30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <xQueueGenericCreateStatic+0x7e>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <xQueueGenericCreateStatic+0x82>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <xQueueGenericCreateStatic+0x84>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	61fb      	str	r3, [r7, #28]
}
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e5e:	2350      	movs	r3, #80	; 0x50
 8002e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b50      	cmp	r3, #80	; 0x50
 8002e66:	d00a      	beq.n	8002e7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61bb      	str	r3, [r7, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f83f 	bl	8002f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3730      	adds	r7, #48	; 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	613b      	str	r3, [r7, #16]
}
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3350      	adds	r3, #80	; 0x50
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fca5 	bl	8005838 <pvPortMalloc>
 8002eee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3350      	adds	r3, #80	; 0x50
 8002efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f805 	bl	8002f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e002      	b.n	8002f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f52:	2101      	movs	r1, #1
 8002f54:	69b8      	ldr	r0, [r7, #24]
 8002f56:	f7ff fecb 	bl	8002cf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08a      	sub	sp, #40	; 0x28
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61bb      	str	r3, [r7, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d90a      	bls.n	8002fb0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	617b      	str	r3, [r7, #20]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ff00 	bl	8002dc0 <xQueueGenericCreateStatic>
 8002fc0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002fce:	69fb      	ldr	r3, [r7, #28]
	}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	613b      	str	r3, [r7, #16]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	d90a      	bls.n	800301c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60fb      	str	r3, [r7, #12]
}
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800301c:	2202      	movs	r2, #2
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff45 	bl	8002eb0 <xQueueGenericCreate>
 8003026:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003034:	697b      	ldr	r3, [r7, #20]
	}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800304e:	2300      	movs	r3, #0
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <xQueueGenericSend+0x32>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <xQueueGenericSend+0x40>
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <xQueueGenericSend+0x44>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <xQueueGenericSend+0x46>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <xQueueGenericSend+0x60>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d103      	bne.n	80030ae <xQueueGenericSend+0x6e>
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <xQueueGenericSend+0x72>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueGenericSend+0x74>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueGenericSend+0x8e>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	623b      	str	r3, [r7, #32]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ce:	f001 fc3b 	bl	8004948 <xTaskGetSchedulerState>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <xQueueGenericSend+0x9e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <xQueueGenericSend+0xa2>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueGenericSend+0xa4>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueGenericSend+0xbe>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61fb      	str	r3, [r7, #28]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030fe:	f002 fa79 	bl	80055f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <xQueueGenericSend+0xd4>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d129      	bne.n	8003168 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311a:	f000 fc5e 	bl	80039da <prvCopyDataToQueue>
 800311e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fa4d 	bl	80045cc <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003138:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <xQueueGenericSend+0x1f8>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	e00a      	b.n	8003160 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <xQueueGenericSend+0x1f8>)
 8003152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003160:	f002 fa78 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 8003164:	2301      	movs	r3, #1
 8003166:	e063      	b.n	8003230 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800316e:	f002 fa71 	bl	8005654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003172:	2300      	movs	r3, #0
 8003174:	e05c      	b.n	8003230 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fa87 	bl	8004694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003186:	2301      	movs	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800318a:	f002 fa63 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800318e:	f000 fff9 	bl	8004184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003192:	f002 fa2f 	bl	80055f4 <vPortEnterCritical>
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800319c:	b25b      	sxtb	r3, r3
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d103      	bne.n	80031ac <xQueueGenericSend+0x16c>
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d103      	bne.n	80031c2 <xQueueGenericSend+0x182>
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c2:	f002 fa47 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c6:	1d3a      	adds	r2, r7, #4
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fa76 	bl	80046c0 <xTaskCheckForTimeOut>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d124      	bne.n	8003224 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031dc:	f000 fcf5 	bl	8003bca <prvIsQueueFull>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d018      	beq.n	8003218 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	3310      	adds	r3, #16
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 f99c 	bl	800452c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f6:	f000 fc80 	bl	8003afa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031fa:	f000 ffd1 	bl	80041a0 <xTaskResumeAll>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f af7c 	bne.w	80030fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <xQueueGenericSend+0x1f8>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	e772      	b.n	80030fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800321a:	f000 fc6e 	bl	8003afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800321e:	f000 ffbf 	bl	80041a0 <xTaskResumeAll>
 8003222:	e76c      	b.n	80030fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003226:	f000 fc68 	bl	8003afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800322a:	f000 ffb9 	bl	80041a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800322e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003230:	4618      	mov	r0, r3
 8003232:	3738      	adds	r7, #56	; 0x38
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b090      	sub	sp, #64	; 0x40
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <xQueueGenericSendFromISR+0x3c>
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <xQueueGenericSendFromISR+0x40>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <xQueueGenericSendFromISR+0x42>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d103      	bne.n	80032a6 <xQueueGenericSendFromISR+0x6a>
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <xQueueGenericSendFromISR+0x6e>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <xQueueGenericSendFromISR+0x70>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	623b      	str	r3, [r7, #32]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032c6:	f002 fa77 	bl	80057b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032ca:	f3ef 8211 	mrs	r2, BASEPRI
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	61fa      	str	r2, [r7, #28]
 80032e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <xQueueGenericSendFromISR+0xbc>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d12f      	bne.n	8003358 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800330e:	f000 fb64 	bl	80039da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003312:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d112      	bne.n	8003342 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d016      	beq.n	8003352 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	3324      	adds	r3, #36	; 0x24
 8003328:	4618      	mov	r0, r3
 800332a:	f001 f94f 	bl	80045cc <xTaskRemoveFromEventList>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e007      	b.n	8003352 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003346:	3301      	adds	r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	b25a      	sxtb	r2, r3
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003352:	2301      	movs	r3, #1
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003356:	e001      	b.n	800335c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003358:	2300      	movs	r3, #0
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003366:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800336a:	4618      	mov	r0, r3
 800336c:	3740      	adds	r7, #64	; 0x40
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b08e      	sub	sp, #56	; 0x38
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	623b      	str	r3, [r7, #32]
}
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <xQueueGiveFromISR+0x48>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	61fb      	str	r3, [r7, #28]
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <xQueueGiveFromISR+0x58>
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xQueueGiveFromISR+0x5c>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueGiveFromISR+0x5e>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xQueueGiveFromISR+0x78>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61bb      	str	r3, [r7, #24]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033ea:	f002 f9e5 	bl	80057b8 <vPortValidateInterruptPriority>
	__asm volatile
 80033ee:	f3ef 8211 	mrs	r2, BASEPRI
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	617a      	str	r2, [r7, #20]
 8003404:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003406:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003416:	429a      	cmp	r2, r3
 8003418:	d22b      	bcs.n	8003472 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800342c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d112      	bne.n	800345c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	3324      	adds	r3, #36	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f001 f8c2 	bl	80045cc <xTaskRemoveFromEventList>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00e      	beq.n	800346c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800345c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003460:	3301      	adds	r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b25a      	sxtb	r2, r3
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
 8003470:	e001      	b.n	8003476 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003472:	2300      	movs	r3, #0
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f383 8811 	msr	BASEPRI, r3
}
 8003480:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003484:	4618      	mov	r0, r3
 8003486:	3738      	adds	r7, #56	; 0x38
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08c      	sub	sp, #48	; 0x30
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xQueueReceive+0x30>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	623b      	str	r3, [r7, #32]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueReceive+0x3e>
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <xQueueReceive+0x42>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <xQueueReceive+0x44>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueReceive+0x5e>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	61fb      	str	r3, [r7, #28]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ea:	f001 fa2d 	bl	8004948 <xTaskGetSchedulerState>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <xQueueReceive+0x6e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <xQueueReceive+0x72>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <xQueueReceive+0x74>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueReceive+0x8e>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61bb      	str	r3, [r7, #24]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351a:	f002 f86b 	bl	80055f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01f      	beq.n	800356a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800352e:	f000 fabe 	bl	8003aae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00f      	beq.n	8003562 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	3310      	adds	r3, #16
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f840 	bl	80045cc <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <xQueueReceive+0x1bc>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003562:	f002 f877 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 8003566:	2301      	movs	r3, #1
 8003568:	e069      	b.n	800363e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003570:	f002 f870 	bl	8005654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003574:	2300      	movs	r3, #0
 8003576:	e062      	b.n	800363e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800357e:	f107 0310 	add.w	r3, r7, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f886 	bl	8004694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358c:	f002 f862 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003590:	f000 fdf8 	bl	8004184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003594:	f002 f82e 	bl	80055f4 <vPortEnterCritical>
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d103      	bne.n	80035ae <xQueueReceive+0x122>
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <xQueueReceive+0x138>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c4:	f002 f846 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c8:	1d3a      	adds	r2, r7, #4
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f875 	bl	80046c0 <xTaskCheckForTimeOut>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d123      	bne.n	8003624 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035de:	f000 fade 	bl	8003b9e <prvIsQueueEmpty>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 ff9b 	bl	800452c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f8:	f000 fa7f 	bl	8003afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035fc:	f000 fdd0 	bl	80041a0 <xTaskResumeAll>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d189      	bne.n	800351a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <xQueueReceive+0x1bc>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	e780      	b.n	800351a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361a:	f000 fa6e 	bl	8003afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800361e:	f000 fdbf 	bl	80041a0 <xTaskResumeAll>
 8003622:	e77a      	b.n	800351a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003626:	f000 fa68 	bl	8003afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362a:	f000 fdb9 	bl	80041a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 fab5 	bl	8003b9e <prvIsQueueEmpty>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	f43f af6f 	beq.w	800351a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800363c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800363e:	4618      	mov	r0, r3
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	; 0x38
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	623b      	str	r3, [r7, #32]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	61fb      	str	r3, [r7, #28]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800369c:	f001 f954 	bl	8004948 <xTaskGetSchedulerState>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <xQueueSemaphoreTake+0x60>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <xQueueSemaphoreTake+0x64>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <xQueueSemaphoreTake+0x66>
 80036b0:	2300      	movs	r3, #0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	61bb      	str	r3, [r7, #24]
}
 80036c8:	bf00      	nop
 80036ca:	e7fe      	b.n	80036ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036cc:	f001 ff92 	bl	80055f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d024      	beq.n	8003726 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80036ec:	f001 faa2 	bl	8004c34 <pvTaskIncrementMutexHeldCount>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00f      	beq.n	800371e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f000 ff62 	bl	80045cc <xTaskRemoveFromEventList>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <xQueueSemaphoreTake+0x214>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800371e:	f001 ff99 	bl	8005654 <vPortExitCritical>
				return pdPASS;
 8003722:	2301      	movs	r3, #1
 8003724:	e097      	b.n	8003856 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d111      	bne.n	8003750 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	617b      	str	r3, [r7, #20]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003748:	f001 ff84 	bl	8005654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800374c:	2300      	movs	r3, #0
 800374e:	e082      	b.n	8003856 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	4618      	mov	r0, r3
 800375c:	f000 ff9a 	bl	8004694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003764:	f001 ff76 	bl	8005654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003768:	f000 fd0c 	bl	8004184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800376c:	f001 ff42 	bl	80055f4 <vPortEnterCritical>
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003776:	b25b      	sxtb	r3, r3
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d103      	bne.n	8003786 <xQueueSemaphoreTake+0x13a>
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378c:	b25b      	sxtb	r3, r3
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d103      	bne.n	800379c <xQueueSemaphoreTake+0x150>
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379c:	f001 ff5a 	bl	8005654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a0:	463a      	mov	r2, r7
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 ff89 	bl	80046c0 <xTaskCheckForTimeOut>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d132      	bne.n	800381a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037b6:	f000 f9f2 	bl	8003b9e <prvIsQueueEmpty>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d026      	beq.n	800380e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80037c8:	f001 ff14 	bl	80055f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 f8d7 	bl	8004984 <xTaskPriorityInherit>
 80037d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80037d8:	f001 ff3c 	bl	8005654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fea1 	bl	800452c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037ec:	f000 f985 	bl	8003afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f0:	f000 fcd6 	bl	80041a0 <xTaskResumeAll>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f47f af68 	bne.w	80036cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <xQueueSemaphoreTake+0x214>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	e75e      	b.n	80036cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800380e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003810:	f000 f973 	bl	8003afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003814:	f000 fcc4 	bl	80041a0 <xTaskResumeAll>
 8003818:	e758      	b.n	80036cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800381a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800381c:	f000 f96d 	bl	8003afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003820:	f000 fcbe 	bl	80041a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003826:	f000 f9ba 	bl	8003b9e <prvIsQueueEmpty>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	f43f af4d 	beq.w	80036cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003838:	f001 fedc 	bl	80055f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800383c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800383e:	f000 f8b4 	bl	80039aa <prvGetDisinheritPriorityAfterTimeout>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f001 f970 	bl	8004b30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003850:	f001 ff00 	bl	8005654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003856:	4618      	mov	r0, r3
 8003858:	3738      	adds	r7, #56	; 0x38
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	; 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	623b      	str	r3, [r7, #32]
}
 800388c:	bf00      	nop
 800388e:	e7fe      	b.n	800388e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <xQueueReceiveFromISR+0x3a>
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <xQueueReceiveFromISR+0x3e>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <xQueueReceiveFromISR+0x40>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	61fb      	str	r3, [r7, #28]
}
 80038ba:	bf00      	nop
 80038bc:	e7fe      	b.n	80038bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038be:	f001 ff7b 	bl	80057b8 <vPortValidateInterruptPriority>
	__asm volatile
 80038c2:	f3ef 8211 	mrs	r2, BASEPRI
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	61ba      	str	r2, [r7, #24]
 80038d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80038da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d02f      	beq.n	800394a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f8:	f000 f8d9 	bl	8003aae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d112      	bne.n	8003934 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	3310      	adds	r3, #16
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fe56 	bl	80045cc <xTaskRemoveFromEventList>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00e      	beq.n	8003944 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e007      	b.n	8003944 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003938:	3301      	adds	r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	b25a      	sxtb	r2, r3
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	637b      	str	r3, [r7, #52]	; 0x34
 8003948:	e001      	b.n	800394e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800394a:	2300      	movs	r3, #0
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f383 8811 	msr	BASEPRI, r3
}
 8003958:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800395c:	4618      	mov	r0, r3
 800395e:	3738      	adds	r7, #56	; 0x38
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <vQueueDelete+0x28>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60bb      	str	r3, [r7, #8]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f95f 	bl	8003c50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f002 f817 	bl	80059d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e001      	b.n	80039cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80039cc:	68fb      	ldr	r3, [r7, #12]
	}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d14d      	bne.n	8003a9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 f825 	bl	8004a54 <xTaskPriorityDisinherit>
 8003a0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e043      	b.n	8003a9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6858      	ldr	r0, [r3, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	461a      	mov	r2, r3
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	f002 f915 	bl	8005c54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d32b      	bcc.n	8003a9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e026      	b.n	8003a9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68d8      	ldr	r0, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	461a      	mov	r2, r3
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	f002 f8fb 	bl	8005c54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	425b      	negs	r3, r3
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d207      	bcs.n	8003a8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	425b      	negs	r3, r3
 8003a84:	441a      	add	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d105      	bne.n	8003a9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003aa4:	697b      	ldr	r3, [r7, #20]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	441a      	add	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d303      	bcc.n	8003ae2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	461a      	mov	r2, r3
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	f002 f8b1 	bl	8005c54 <memcpy>
	}
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b02:	f001 fd77 	bl	80055f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b0e:	e011      	b.n	8003b34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fd55 	bl	80045cc <xTaskRemoveFromEventList>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b28:	f000 fe2c 	bl	8004784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dce9      	bgt.n	8003b10 <prvUnlockQueue+0x16>
 8003b3c:	e000      	b.n	8003b40 <prvUnlockQueue+0x46>
					break;
 8003b3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	22ff      	movs	r2, #255	; 0xff
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b48:	f001 fd84 	bl	8005654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b4c:	f001 fd52 	bl	80055f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b58:	e011      	b.n	8003b7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3310      	adds	r3, #16
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fd30 	bl	80045cc <xTaskRemoveFromEventList>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b72:	f000 fe07 	bl	8004784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	dce9      	bgt.n	8003b5a <prvUnlockQueue+0x60>
 8003b86:	e000      	b.n	8003b8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	22ff      	movs	r2, #255	; 0xff
 8003b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b92:	f001 fd5f 	bl	8005654 <vPortExitCritical>
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ba6:	f001 fd25 	bl	80055f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e001      	b.n	8003bbc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bbc:	f001 fd4a 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bd2:	f001 fd0f 	bl	80055f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d102      	bne.n	8003be8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e001      	b.n	8003bec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bec:	f001 fd32 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e014      	b.n	8003c36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	; (8003c4c <vQueueAddToRegistry+0x50>)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c18:	490c      	ldr	r1, [pc, #48]	; (8003c4c <vQueueAddToRegistry+0x50>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <vQueueAddToRegistry+0x50>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c2e:	e006      	b.n	8003c3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b07      	cmp	r3, #7
 8003c3a:	d9e7      	bls.n	8003c0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000788 	.word	0x20000788

08003c50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e016      	b.n	8003c8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003c5e:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <vQueueUnregisterQueue+0x50>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10b      	bne.n	8003c86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <vQueueUnregisterQueue+0x50>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2100      	movs	r1, #0
 8003c74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003c78:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <vQueueUnregisterQueue+0x50>)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
				break;
 8003c84:	e006      	b.n	8003c94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	d9e5      	bls.n	8003c5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	20000788 	.word	0x20000788

08003ca4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cb4:	f001 fc9e 	bl	80055f4 <vPortEnterCritical>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d103      	bne.n	8003cce <vQueueWaitForMessageRestricted+0x2a>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d103      	bne.n	8003ce4 <vQueueWaitForMessageRestricted+0x40>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	f001 fcb6 	bl	8005654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3324      	adds	r3, #36	; 0x24
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fc3b 	bl	8004574 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003cfe:	6978      	ldr	r0, [r7, #20]
 8003d00:	f7ff fefb 	bl	8003afa <prvUnlockQueue>
	}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af04      	add	r7, sp, #16
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	61fb      	str	r3, [r7, #28]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d52:	235c      	movs	r3, #92	; 0x5c
 8003d54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b5c      	cmp	r3, #92	; 0x5c
 8003d5a:	d00a      	beq.n	8003d72 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	61bb      	str	r3, [r7, #24]
}
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01e      	beq.n	8003db8 <xTaskCreateStatic+0xac>
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d92:	2300      	movs	r3, #0
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f850 	bl	8003e50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003db2:	f000 f8dd 	bl	8003f70 <prvAddNewTaskToReadyList>
 8003db6:	e001      	b.n	8003dbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dbc:	697b      	ldr	r3, [r7, #20]
	}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3728      	adds	r7, #40	; 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b08c      	sub	sp, #48	; 0x30
 8003dca:	af04      	add	r7, sp, #16
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fd2c 	bl	8005838 <pvPortMalloc>
 8003de0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003de8:	205c      	movs	r0, #92	; 0x5c
 8003dea:	f001 fd25 	bl	8005838 <pvPortMalloc>
 8003dee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8003dfc:	e005      	b.n	8003e0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f001 fde6 	bl	80059d0 <vPortFree>
 8003e04:	e001      	b.n	8003e0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9303      	str	r3, [sp, #12]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	9302      	str	r3, [sp, #8]
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f80e 	bl	8003e50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e34:	69f8      	ldr	r0, [r7, #28]
 8003e36:	f000 f89b 	bl	8003f70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e002      	b.n	8003e46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e46:	69bb      	ldr	r3, [r7, #24]
	}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3720      	adds	r7, #32
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	461a      	mov	r2, r3
 8003e68:	21a5      	movs	r1, #165	; 0xa5
 8003e6a:	f001 ff01 	bl	8005c70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f023 0307 	bic.w	r3, r3, #7
 8003e86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	617b      	str	r3, [r7, #20]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01f      	beq.n	8003eee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e012      	b.n	8003eda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	7819      	ldrb	r1, [r3, #0]
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3334      	adds	r3, #52	; 0x34
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b0f      	cmp	r3, #15
 8003ede:	d9e9      	bls.n	8003eb4 <prvInitialiseNewTask+0x64>
 8003ee0:	e000      	b.n	8003ee4 <prvInitialiseNewTask+0x94>
			{
				break;
 8003ee2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eec:	e003      	b.n	8003ef6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	2b37      	cmp	r3, #55	; 0x37
 8003efa:	d901      	bls.n	8003f00 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003efc:	2337      	movs	r3, #55	; 0x37
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	2200      	movs	r2, #0
 8003f10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fe56 	bl	8002bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	3318      	adds	r3, #24
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fe51 	bl	8002bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	2200      	movs	r2, #0
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	69b8      	ldr	r0, [r7, #24]
 8003f50:	f001 fa26 	bl	80053a0 <pxPortInitialiseStack>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f66:	bf00      	nop
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f78:	f001 fb3c 	bl	80055f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <prvAddNewTaskToReadyList+0xc4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <prvAddNewTaskToReadyList+0xc4>)
 8003f84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f86:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <prvAddNewTaskToReadyList+0xc8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <prvAddNewTaskToReadyList+0xc8>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <prvAddNewTaskToReadyList+0xc4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d110      	bne.n	8003fbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f9c:	f000 fc16 	bl	80047cc <prvInitialiseTaskLists>
 8003fa0:	e00d      	b.n	8003fbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <prvAddNewTaskToReadyList+0xcc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <prvAddNewTaskToReadyList+0xc8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d802      	bhi.n	8003fbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <prvAddNewTaskToReadyList+0xc8>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <prvAddNewTaskToReadyList+0xd0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <prvAddNewTaskToReadyList+0xd0>)
 8003fc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <prvAddNewTaskToReadyList+0xd0>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <prvAddNewTaskToReadyList+0xd4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d903      	bls.n	8003fe4 <prvAddNewTaskToReadyList+0x74>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <prvAddNewTaskToReadyList+0xd4>)
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <prvAddNewTaskToReadyList+0xd8>)
 8003ff2:	441a      	add	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f7fe fdf1 	bl	8002be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004000:	f001 fb28 	bl	8005654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <prvAddNewTaskToReadyList+0xcc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <prvAddNewTaskToReadyList+0xc8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	429a      	cmp	r2, r3
 8004018:	d207      	bcs.n	800402a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <prvAddNewTaskToReadyList+0xdc>)
 800401c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000c9c 	.word	0x20000c9c
 8004038:	200007c8 	.word	0x200007c8
 800403c:	20000ca8 	.word	0x20000ca8
 8004040:	20000cb8 	.word	0x20000cb8
 8004044:	20000ca4 	.word	0x20000ca4
 8004048:	200007cc 	.word	0x200007cc
 800404c:	e000ed04 	.word	0xe000ed04

08004050 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <vTaskDelay+0x60>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <vTaskDelay+0x30>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004080:	f000 f880 	bl	8004184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004084:	2100      	movs	r1, #0
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fde8 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800408c:	f000 f888 	bl	80041a0 <xTaskResumeAll>
 8004090:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <vTaskDelay+0x64>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000cc4 	.word	0x20000cc4
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040c6:	463a      	mov	r2, r7
 80040c8:	1d39      	adds	r1, r7, #4
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fd26 	bl	8002b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	9202      	str	r2, [sp, #8]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	460a      	mov	r2, r1
 80040e6:	4921      	ldr	r1, [pc, #132]	; (800416c <vTaskStartScheduler+0xb4>)
 80040e8:	4821      	ldr	r0, [pc, #132]	; (8004170 <vTaskStartScheduler+0xb8>)
 80040ea:	f7ff fe0f 	bl	8003d0c <xTaskCreateStatic>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a20      	ldr	r2, [pc, #128]	; (8004174 <vTaskStartScheduler+0xbc>)
 80040f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <vTaskStartScheduler+0xbc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e001      	b.n	8004106 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d102      	bne.n	8004112 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800410c:	f000 fdfa 	bl	8004d04 <xTimerCreateTimerTask>
 8004110:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d116      	bne.n	8004146 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	613b      	str	r3, [r7, #16]
}
 800412a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <vTaskStartScheduler+0xc0>)
 800412e:	f04f 32ff 	mov.w	r2, #4294967295
 8004132:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <vTaskStartScheduler+0xc4>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <vTaskStartScheduler+0xc8>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004140:	f001 f9b6 	bl	80054b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004144:	e00e      	b.n	8004164 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d10a      	bne.n	8004164 <vTaskStartScheduler+0xac>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	60fb      	str	r3, [r7, #12]
}
 8004160:	bf00      	nop
 8004162:	e7fe      	b.n	8004162 <vTaskStartScheduler+0xaa>
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	08005cb4 	.word	0x08005cb4
 8004170:	0800479d 	.word	0x0800479d
 8004174:	20000cc0 	.word	0x20000cc0
 8004178:	20000cbc 	.word	0x20000cbc
 800417c:	20000ca8 	.word	0x20000ca8
 8004180:	20000ca0 	.word	0x20000ca0

08004184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <vTaskSuspendAll+0x18>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	4a03      	ldr	r2, [pc, #12]	; (800419c <vTaskSuspendAll+0x18>)
 8004190:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	20000cc4 	.word	0x20000cc4

080041a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ae:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <xTaskResumeAll+0x118>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <xTaskResumeAll+0x2c>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	603b      	str	r3, [r7, #0]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041cc:	f001 fa12 	bl	80055f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <xTaskResumeAll+0x118>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <xTaskResumeAll+0x118>)
 80041d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <xTaskResumeAll+0x118>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d162      	bne.n	80042a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e2:	4b36      	ldr	r3, [pc, #216]	; (80042bc <xTaskResumeAll+0x11c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d05e      	beq.n	80042a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ea:	e02f      	b.n	800424c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <xTaskResumeAll+0x120>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3318      	adds	r3, #24
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fd4f 	bl	8002c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fd4a 	bl	8002c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <xTaskResumeAll+0x124>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <xTaskResumeAll+0x7c>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <xTaskResumeAll+0x124>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <xTaskResumeAll+0x128>)
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7fe fcd5 	bl	8002be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <xTaskResumeAll+0x12c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <xTaskResumeAll+0x130>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800424c:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <xTaskResumeAll+0x120>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1cb      	bne.n	80041ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800425a:	f000 fb55 	bl	8004908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800425e:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <xTaskResumeAll+0x134>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800426a:	f000 f847 	bl	80042fc <xTaskIncrementTick>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <xTaskResumeAll+0x130>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3b01      	subs	r3, #1
 800427e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f1      	bne.n	800426a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <xTaskResumeAll+0x134>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <xTaskResumeAll+0x130>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <xTaskResumeAll+0x138>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042a8:	f001 f9d4 	bl	8005654 <vPortExitCritical>

	return xAlreadyYielded;
 80042ac:	68bb      	ldr	r3, [r7, #8]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000cc4 	.word	0x20000cc4
 80042bc:	20000c9c 	.word	0x20000c9c
 80042c0:	20000c5c 	.word	0x20000c5c
 80042c4:	20000ca4 	.word	0x20000ca4
 80042c8:	200007cc 	.word	0x200007cc
 80042cc:	200007c8 	.word	0x200007c8
 80042d0:	20000cb0 	.word	0x20000cb0
 80042d4:	20000cac 	.word	0x20000cac
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <xTaskGetTickCount+0x1c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042e8:	687b      	ldr	r3, [r7, #4]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000ca0 	.word	0x20000ca0

080042fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004306:	4b4f      	ldr	r3, [pc, #316]	; (8004444 <xTaskIncrementTick+0x148>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 808f 	bne.w	800442e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004310:	4b4d      	ldr	r3, [pc, #308]	; (8004448 <xTaskIncrementTick+0x14c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004318:	4a4b      	ldr	r2, [pc, #300]	; (8004448 <xTaskIncrementTick+0x14c>)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d120      	bne.n	8004366 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004324:	4b49      	ldr	r3, [pc, #292]	; (800444c <xTaskIncrementTick+0x150>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <xTaskIncrementTick+0x48>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	603b      	str	r3, [r7, #0]
}
 8004340:	bf00      	nop
 8004342:	e7fe      	b.n	8004342 <xTaskIncrementTick+0x46>
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <xTaskIncrementTick+0x150>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	4b41      	ldr	r3, [pc, #260]	; (8004450 <xTaskIncrementTick+0x154>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3f      	ldr	r2, [pc, #252]	; (800444c <xTaskIncrementTick+0x150>)
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4a3f      	ldr	r2, [pc, #252]	; (8004450 <xTaskIncrementTick+0x154>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <xTaskIncrementTick+0x158>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <xTaskIncrementTick+0x158>)
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	f000 fad1 	bl	8004908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004366:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <xTaskIncrementTick+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d349      	bcc.n	8004404 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004370:	4b36      	ldr	r3, [pc, #216]	; (800444c <xTaskIncrementTick+0x150>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437a:	4b37      	ldr	r3, [pc, #220]	; (8004458 <xTaskIncrementTick+0x15c>)
 800437c:	f04f 32ff 	mov.w	r2, #4294967295
 8004380:	601a      	str	r2, [r3, #0]
					break;
 8004382:	e03f      	b.n	8004404 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004384:	4b31      	ldr	r3, [pc, #196]	; (800444c <xTaskIncrementTick+0x150>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d203      	bcs.n	80043a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800439c:	4a2e      	ldr	r2, [pc, #184]	; (8004458 <xTaskIncrementTick+0x15c>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043a2:	e02f      	b.n	8004404 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fc77 	bl	8002c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	3318      	adds	r3, #24
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fc6e 	bl	8002c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <xTaskIncrementTick+0x160>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d903      	bls.n	80043d4 <xTaskIncrementTick+0xd8>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <xTaskIncrementTick+0x160>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <xTaskIncrementTick+0x164>)
 80043e2:	441a      	add	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7fe fbf9 	bl	8002be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <xTaskIncrementTick+0x168>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d3b8      	bcc.n	8004370 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043fe:	2301      	movs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004402:	e7b5      	b.n	8004370 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <xTaskIncrementTick+0x168>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4915      	ldr	r1, [pc, #84]	; (8004460 <xTaskIncrementTick+0x164>)
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d901      	bls.n	8004420 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <xTaskIncrementTick+0x16c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e004      	b.n	8004438 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <xTaskIncrementTick+0x170>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <xTaskIncrementTick+0x170>)
 8004436:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004438:	697b      	ldr	r3, [r7, #20]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000cc4 	.word	0x20000cc4
 8004448:	20000ca0 	.word	0x20000ca0
 800444c:	20000c54 	.word	0x20000c54
 8004450:	20000c58 	.word	0x20000c58
 8004454:	20000cb4 	.word	0x20000cb4
 8004458:	20000cbc 	.word	0x20000cbc
 800445c:	20000ca4 	.word	0x20000ca4
 8004460:	200007cc 	.word	0x200007cc
 8004464:	200007c8 	.word	0x200007c8
 8004468:	20000cb0 	.word	0x20000cb0
 800446c:	20000cac 	.word	0x20000cac

08004470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <vTaskSwitchContext+0xa8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800447e:	4b27      	ldr	r3, [pc, #156]	; (800451c <vTaskSwitchContext+0xac>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004484:	e041      	b.n	800450a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004486:	4b25      	ldr	r3, [pc, #148]	; (800451c <vTaskSwitchContext+0xac>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <vTaskSwitchContext+0xb0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e010      	b.n	80044b6 <vTaskSwitchContext+0x46>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	607b      	str	r3, [r7, #4]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <vTaskSwitchContext+0x3e>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	491b      	ldr	r1, [pc, #108]	; (8004524 <vTaskSwitchContext+0xb4>)
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0e4      	beq.n	8004494 <vTaskSwitchContext+0x24>
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <vTaskSwitchContext+0xb4>)
 80044d6:	4413      	add	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	3308      	adds	r3, #8
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d104      	bne.n	80044fa <vTaskSwitchContext+0x8a>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a09      	ldr	r2, [pc, #36]	; (8004528 <vTaskSwitchContext+0xb8>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4a06      	ldr	r2, [pc, #24]	; (8004520 <vTaskSwitchContext+0xb0>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000cc4 	.word	0x20000cc4
 800451c:	20000cb0 	.word	0x20000cb0
 8004520:	20000ca4 	.word	0x20000ca4
 8004524:	200007cc 	.word	0x200007cc
 8004528:	200007c8 	.word	0x200007c8

0800452c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <vTaskPlaceOnEventList+0x44>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3318      	adds	r3, #24
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fb65 	bl	8002c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004560:	2101      	movs	r1, #1
 8004562:	6838      	ldr	r0, [r7, #0]
 8004564:	f000 fb7a 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200007c8 	.word	0x200007c8

08004574 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	617b      	str	r3, [r7, #20]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3318      	adds	r3, #24
 80045a2:	4619      	mov	r1, r3
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7fe fb1c 	bl	8002be2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f000 fb4f 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
	}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200007c8 	.word	0x200007c8

080045cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60fb      	str	r3, [r7, #12]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3318      	adds	r3, #24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fb4d 	bl	8002c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <xTaskRemoveFromEventList+0xb0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3304      	adds	r3, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fb44 	bl	8002c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <xTaskRemoveFromEventList+0xb4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d903      	bls.n	8004628 <xTaskRemoveFromEventList+0x5c>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4a16      	ldr	r2, [pc, #88]	; (8004680 <xTaskRemoveFromEventList+0xb4>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <xTaskRemoveFromEventList+0xb8>)
 8004636:	441a      	add	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe facf 	bl	8002be2 <vListInsertEnd>
 8004644:	e005      	b.n	8004652 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3318      	adds	r3, #24
 800464a:	4619      	mov	r1, r3
 800464c:	480e      	ldr	r0, [pc, #56]	; (8004688 <xTaskRemoveFromEventList+0xbc>)
 800464e:	f7fe fac8 	bl	8002be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <xTaskRemoveFromEventList+0xc0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	429a      	cmp	r2, r3
 800465e:	d905      	bls.n	800466c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <xTaskRemoveFromEventList+0xc4>)
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e001      	b.n	8004670 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004670:	697b      	ldr	r3, [r7, #20]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000cc4 	.word	0x20000cc4
 8004680:	20000ca4 	.word	0x20000ca4
 8004684:	200007cc 	.word	0x200007cc
 8004688:	20000c5c 	.word	0x20000c5c
 800468c:	200007c8 	.word	0x200007c8
 8004690:	20000cb0 	.word	0x20000cb0

08004694 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <vTaskInternalSetTimeOutState+0x24>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <vTaskInternalSetTimeOutState+0x28>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	605a      	str	r2, [r3, #4]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20000cb4 	.word	0x20000cb4
 80046bc:	20000ca0 	.word	0x20000ca0

080046c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	613b      	str	r3, [r7, #16]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	60fb      	str	r3, [r7, #12]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004702:	f000 ff77 	bl	80055f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <xTaskCheckForTimeOut+0xbc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d102      	bne.n	8004726 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e023      	b.n	800476e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <xTaskCheckForTimeOut+0xc0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d007      	beq.n	8004742 <xTaskCheckForTimeOut+0x82>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e015      	b.n	800476e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	429a      	cmp	r2, r3
 800474a:	d20b      	bcs.n	8004764 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff9b 	bl	8004694 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e004      	b.n	800476e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800476a:	2301      	movs	r3, #1
 800476c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f000 ff71 	bl	8005654 <vPortExitCritical>

	return xReturn;
 8004772:	69fb      	ldr	r3, [r7, #28]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000ca0 	.word	0x20000ca0
 8004780:	20000cb4 	.word	0x20000cb4

08004784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <vTaskMissedYield+0x14>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000cb0 	.word	0x20000cb0

0800479c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047a4:	f000 f852 	bl	800484c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <prvIdleTask+0x28>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d9f9      	bls.n	80047a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <prvIdleTask+0x2c>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047c0:	e7f0      	b.n	80047a4 <prvIdleTask+0x8>
 80047c2:	bf00      	nop
 80047c4:	200007cc 	.word	0x200007cc
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	e00c      	b.n	80047f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <prvInitialiseTaskLists+0x60>)
 80047e4:	4413      	add	r3, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe f9ce 	bl	8002b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b37      	cmp	r3, #55	; 0x37
 80047f6:	d9ef      	bls.n	80047d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047f8:	480d      	ldr	r0, [pc, #52]	; (8004830 <prvInitialiseTaskLists+0x64>)
 80047fa:	f7fe f9c5 	bl	8002b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047fe:	480d      	ldr	r0, [pc, #52]	; (8004834 <prvInitialiseTaskLists+0x68>)
 8004800:	f7fe f9c2 	bl	8002b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004804:	480c      	ldr	r0, [pc, #48]	; (8004838 <prvInitialiseTaskLists+0x6c>)
 8004806:	f7fe f9bf 	bl	8002b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800480a:	480c      	ldr	r0, [pc, #48]	; (800483c <prvInitialiseTaskLists+0x70>)
 800480c:	f7fe f9bc 	bl	8002b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004810:	480b      	ldr	r0, [pc, #44]	; (8004840 <prvInitialiseTaskLists+0x74>)
 8004812:	f7fe f9b9 	bl	8002b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <prvInitialiseTaskLists+0x78>)
 8004818:	4a05      	ldr	r2, [pc, #20]	; (8004830 <prvInitialiseTaskLists+0x64>)
 800481a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <prvInitialiseTaskLists+0x7c>)
 800481e:	4a05      	ldr	r2, [pc, #20]	; (8004834 <prvInitialiseTaskLists+0x68>)
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200007cc 	.word	0x200007cc
 8004830:	20000c2c 	.word	0x20000c2c
 8004834:	20000c40 	.word	0x20000c40
 8004838:	20000c5c 	.word	0x20000c5c
 800483c:	20000c70 	.word	0x20000c70
 8004840:	20000c88 	.word	0x20000c88
 8004844:	20000c54 	.word	0x20000c54
 8004848:	20000c58 	.word	0x20000c58

0800484c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004852:	e019      	b.n	8004888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004854:	f000 fece 	bl	80055f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <prvCheckTasksWaitingTermination+0x50>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fa19 	bl	8002c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <prvCheckTasksWaitingTermination+0x54>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <prvCheckTasksWaitingTermination+0x54>)
 8004872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3b01      	subs	r3, #1
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 800487c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800487e:	f000 fee9 	bl	8005654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f810 	bl	80048a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e1      	bne.n	8004854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000c70 	.word	0x20000c70
 80048a0:	20000c9c 	.word	0x20000c9c
 80048a4:	20000c84 	.word	0x20000c84

080048a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f886 	bl	80059d0 <vPortFree>
				vPortFree( pxTCB );
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 f883 	bl	80059d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048ca:	e018      	b.n	80048fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d103      	bne.n	80048de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 f87a 	bl	80059d0 <vPortFree>
	}
 80048dc:	e00f      	b.n	80048fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d00a      	beq.n	80048fe <prvDeleteTCB+0x56>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <prvDeleteTCB+0x54>
	}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004920:	e008      	b.n	8004934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000c54 	.word	0x20000c54
 8004944:	20000cbc 	.word	0x20000cbc

08004948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <xTaskGetSchedulerState+0x34>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004956:	2301      	movs	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	e008      	b.n	800496e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <xTaskGetSchedulerState+0x38>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004964:	2302      	movs	r3, #2
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	e001      	b.n	800496e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800496e:	687b      	ldr	r3, [r7, #4]
	}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000ca8 	.word	0x20000ca8
 8004980:	20000cc4 	.word	0x20000cc4

08004984 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d051      	beq.n	8004a3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <xTaskPriorityInherit+0xc4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d241      	bcs.n	8004a2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db06      	blt.n	80049be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <xTaskPriorityInherit+0xc4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6959      	ldr	r1, [r3, #20]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <xTaskPriorityInherit+0xc8>)
 80049d0:	4413      	add	r3, r2
 80049d2:	4299      	cmp	r1, r3
 80049d4:	d122      	bne.n	8004a1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe f95e 	bl	8002c9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <xTaskPriorityInherit+0xc4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ee:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <xTaskPriorityInherit+0xcc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <xTaskPriorityInherit+0x7a>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <xTaskPriorityInherit+0xcc>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <xTaskPriorityInherit+0xc8>)
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7fe f8e4 	bl	8002be2 <vListInsertEnd>
 8004a1a:	e004      	b.n	8004a26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <xTaskPriorityInherit+0xc4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e008      	b.n	8004a3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <xTaskPriorityInherit+0xc4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d201      	bcs.n	8004a3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	200007c8 	.word	0x200007c8
 8004a4c:	200007cc 	.word	0x200007cc
 8004a50:	20000ca4 	.word	0x20000ca4

08004a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d056      	beq.n	8004b18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <xTaskPriorityDisinherit+0xd0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d00a      	beq.n	8004a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60bb      	str	r3, [r7, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d02c      	beq.n	8004b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d128      	bne.n	8004b18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe f8e6 	bl	8002c9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <xTaskPriorityDisinherit+0xd4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d903      	bls.n	8004af8 <xTaskPriorityDisinherit+0xa4>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <xTaskPriorityDisinherit+0xd4>)
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <xTaskPriorityDisinherit+0xd8>)
 8004b06:	441a      	add	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe f867 	bl	8002be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b18:	697b      	ldr	r3, [r7, #20]
	}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200007c8 	.word	0x200007c8
 8004b28:	20000ca4 	.word	0x20000ca4
 8004b2c:	200007cc 	.word	0x200007cc

08004b30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d06a      	beq.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d902      	bls.n	8004b76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	e002      	b.n	8004b7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d04b      	beq.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d146      	bne.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d10a      	bne.n	8004bb0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60bb      	str	r3, [r7, #8]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	db04      	blt.n	8004bce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	6959      	ldr	r1, [r3, #20]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004bde:	4413      	add	r3, r2
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d11c      	bne.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe f857 	bl	8002c9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d903      	bls.n	8004c02 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004c10:	441a      	add	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7fd ffe2 	bl	8002be2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c1e:	bf00      	nop
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200007c8 	.word	0x200007c8
 8004c2c:	200007cc 	.word	0x200007cc
 8004c30:	20000ca4 	.word	0x20000ca4

08004c34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c46:	3201      	adds	r2, #1
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
	}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	200007c8 	.word	0x200007c8

08004c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c66:	4b21      	ldr	r3, [pc, #132]	; (8004cec <prvAddCurrentTaskToDelayedList+0x90>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe f812 	bl	8002c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d10a      	bne.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4819      	ldr	r0, [pc, #100]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c90:	f7fd ffa7 	bl	8002be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c94:	e026      	b.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d209      	bcs.n	8004cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fd ffb5 	bl	8002c2a <vListInsert>
}
 8004cc0:	e010      	b.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fd ffab 	bl	8002c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d202      	bcs.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000ca0 	.word	0x20000ca0
 8004cf0:	200007c8 	.word	0x200007c8
 8004cf4:	20000c88 	.word	0x20000c88
 8004cf8:	20000c58 	.word	0x20000c58
 8004cfc:	20000c54 	.word	0x20000c54
 8004d00:	20000cbc 	.word	0x20000cbc

08004d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d0e:	f000 fb07 	bl	8005320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <xTimerCreateTimerTask+0x80>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d22:	1d3a      	adds	r2, r7, #4
 8004d24:	f107 0108 	add.w	r1, r7, #8
 8004d28:	f107 030c 	add.w	r3, r7, #12
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fd ff11 	bl	8002b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	9202      	str	r2, [sp, #8]
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	460a      	mov	r2, r1
 8004d44:	4910      	ldr	r1, [pc, #64]	; (8004d88 <xTimerCreateTimerTask+0x84>)
 8004d46:	4811      	ldr	r0, [pc, #68]	; (8004d8c <xTimerCreateTimerTask+0x88>)
 8004d48:	f7fe ffe0 	bl	8003d0c <xTaskCreateStatic>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a10      	ldr	r2, [pc, #64]	; (8004d90 <xTimerCreateTimerTask+0x8c>)
 8004d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d52:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <xTimerCreateTimerTask+0x8c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	613b      	str	r3, [r7, #16]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d7a:	697b      	ldr	r3, [r7, #20]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000cf8 	.word	0x20000cf8
 8004d88:	08005cbc 	.word	0x08005cbc
 8004d8c:	08004ec9 	.word	0x08004ec9
 8004d90:	20000cfc 	.word	0x20000cfc

08004d94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	623b      	str	r3, [r7, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <xTimerGenericCommand+0x98>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d02a      	beq.n	8004e20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	dc18      	bgt.n	8004e0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ddc:	f7ff fdb4 	bl	8004948 <xTaskGetSchedulerState>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d109      	bne.n	8004dfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <xTimerGenericCommand+0x98>)
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f107 0110 	add.w	r1, r7, #16
 8004dee:	2300      	movs	r3, #0
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	f7fe f925 	bl	8003040 <xQueueGenericSend>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24
 8004df8:	e012      	b.n	8004e20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <xTimerGenericCommand+0x98>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f107 0110 	add.w	r1, r7, #16
 8004e02:	2300      	movs	r3, #0
 8004e04:	2200      	movs	r2, #0
 8004e06:	f7fe f91b 	bl	8003040 <xQueueGenericSend>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e0c:	e008      	b.n	8004e20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <xTimerGenericCommand+0x98>)
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	f107 0110 	add.w	r1, r7, #16
 8004e16:	2300      	movs	r3, #0
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	f7fe fa0f 	bl	800323c <xQueueGenericSendFromISR>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3728      	adds	r7, #40	; 0x28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000cf8 	.word	0x20000cf8

08004e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3a:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <prvProcessExpiredTimer+0x94>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd ff27 	bl	8002c9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d022      	beq.n	8004ea2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	18d1      	adds	r1, r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	6978      	ldr	r0, [r7, #20]
 8004e6a:	f000 f8d1 	bl	8005010 <prvInsertTimerInActiveList>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01f      	beq.n	8004eb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	6978      	ldr	r0, [r7, #20]
 8004e80:	f7ff ff88 	bl	8004d94 <xTimerGenericCommand>
 8004e84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d113      	bne.n	8004eb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	6978      	ldr	r0, [r7, #20]
 8004eba:	4798      	blx	r3
}
 8004ebc:	bf00      	nop
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000cf0 	.word	0x20000cf0

08004ec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ed0:	f107 0308 	add.w	r3, r7, #8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f857 	bl	8004f88 <prvGetNextExpireTime>
 8004eda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f803 	bl	8004eec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ee6:	f000 f8d5 	bl	8005094 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eea:	e7f1      	b.n	8004ed0 <prvTimerTask+0x8>

08004eec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ef6:	f7ff f945 	bl	8004184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004efa:	f107 0308 	add.w	r3, r7, #8
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f866 	bl	8004fd0 <prvSampleTimeNow>
 8004f04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d130      	bne.n	8004f6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <prvProcessTimerOrBlockTask+0x3c>
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d806      	bhi.n	8004f28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f1a:	f7ff f941 	bl	80041a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff85 	bl	8004e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f26:	e024      	b.n	8004f72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <prvProcessTimerOrBlockTask+0x90>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <prvProcessTimerOrBlockTask+0x50>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <prvProcessTimerOrBlockTask+0x52>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f40:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <prvProcessTimerOrBlockTask+0x94>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f7fe fea9 	bl	8003ca4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f52:	f7ff f925 	bl	80041a0 <xTaskResumeAll>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <prvProcessTimerOrBlockTask+0x98>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	f3bf 8f6f 	isb	sy
}
 8004f6c:	e001      	b.n	8004f72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f6e:	f7ff f917 	bl	80041a0 <xTaskResumeAll>
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000cf4 	.word	0x20000cf4
 8004f80:	20000cf8 	.word	0x20000cf8
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <prvGetNextExpireTime+0x44>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <prvGetNextExpireTime+0x16>
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	e000      	b.n	8004fa0 <prvGetNextExpireTime+0x18>
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fac:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <prvGetNextExpireTime+0x44>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e001      	b.n	8004fbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000cf0 	.word	0x20000cf0

08004fd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fd8:	f7ff f980 	bl	80042dc <xTaskGetTickCount>
 8004fdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <prvSampleTimeNow+0x3c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d205      	bcs.n	8004ff4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fe8:	f000 f936 	bl	8005258 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e002      	b.n	8004ffa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ffa:	4a04      	ldr	r2, [pc, #16]	; (800500c <prvSampleTimeNow+0x3c>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005000:	68fb      	ldr	r3, [r7, #12]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000d00 	.word	0x20000d00

08005010 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d812      	bhi.n	800505c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e01b      	b.n	8005082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <prvInsertTimerInActiveList+0x7c>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7fd fde8 	bl	8002c2a <vListInsert>
 800505a:	e012      	b.n	8005082 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d206      	bcs.n	8005072 <prvInsertTimerInActiveList+0x62>
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d302      	bcc.n	8005072 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e007      	b.n	8005082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <prvInsertTimerInActiveList+0x80>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7fd fdd4 	bl	8002c2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000cf4 	.word	0x20000cf4
 8005090:	20000cf0 	.word	0x20000cf0

08005094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800509a:	e0ca      	b.n	8005232 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da18      	bge.n	80050d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050a2:	1d3b      	adds	r3, r7, #4
 80050a4:	3304      	adds	r3, #4
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	61fb      	str	r3, [r7, #28]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ca:	6850      	ldr	r0, [r2, #4]
 80050cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ce:	6892      	ldr	r2, [r2, #8]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f2c0 80aa 	blt.w	8005230 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd fdd5 	bl	8002c9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050f2:	463b      	mov	r3, r7
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff ff6b 	bl	8004fd0 <prvSampleTimeNow>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b09      	cmp	r3, #9
 8005100:	f200 8097 	bhi.w	8005232 <prvProcessReceivedCommands+0x19e>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <prvProcessReceivedCommands+0x78>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005135 	.word	0x08005135
 8005110:	08005135 	.word	0x08005135
 8005114:	08005135 	.word	0x08005135
 8005118:	080051a9 	.word	0x080051a9
 800511c:	080051bd 	.word	0x080051bd
 8005120:	08005207 	.word	0x08005207
 8005124:	08005135 	.word	0x08005135
 8005128:	08005135 	.word	0x08005135
 800512c:	080051a9 	.word	0x080051a9
 8005130:	080051bd 	.word	0x080051bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	b2da      	uxtb	r2, r3
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	18d1      	adds	r1, r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005154:	f7ff ff5c 	bl	8005010 <prvInsertTimerInActiveList>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d069      	beq.n	8005232 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005164:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d05e      	beq.n	8005232 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	441a      	add	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	2100      	movs	r1, #0
 8005184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005186:	f7ff fe05 	bl	8004d94 <xTimerGenericCommand>
 800518a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d14f      	bne.n	8005232 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	61bb      	str	r3, [r7, #24]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051ba:	e03a      	b.n	8005232 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	617b      	str	r3, [r7, #20]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	18d1      	adds	r1, r2, r3
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005200:	f7ff ff06 	bl	8005010 <prvInsertTimerInActiveList>
					break;
 8005204:	e015      	b.n	8005232 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f000 fbdb 	bl	80059d0 <vPortFree>
 800521a:	e00a      	b.n	8005232 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800522e:	e000      	b.n	8005232 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005230:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <prvProcessReceivedCommands+0x1c0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1d39      	adds	r1, r7, #4
 8005238:	2200      	movs	r2, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe f926 	bl	800348c <xQueueReceive>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	f47f af2a 	bne.w	800509c <prvProcessReceivedCommands+0x8>
	}
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3730      	adds	r7, #48	; 0x30
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000cf8 	.word	0x20000cf8

08005258 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800525e:	e048      	b.n	80052f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005260:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <prvSwitchTimerLists+0xc0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526a:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <prvSwitchTimerLists+0xc0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fd fd0f 	bl	8002c9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d02e      	beq.n	80052f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4413      	add	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90e      	bls.n	80052c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <prvSwitchTimerLists+0xc0>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7fd fcb4 	bl	8002c2a <vListInsert>
 80052c2:	e016      	b.n	80052f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052c4:	2300      	movs	r3, #0
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	2100      	movs	r1, #0
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff fd60 	bl	8004d94 <xTimerGenericCommand>
 80052d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	603b      	str	r3, [r7, #0]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052f2:	4b09      	ldr	r3, [pc, #36]	; (8005318 <prvSwitchTimerLists+0xc0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1b1      	bne.n	8005260 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <prvSwitchTimerLists+0xc0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <prvSwitchTimerLists+0xc4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a04      	ldr	r2, [pc, #16]	; (8005318 <prvSwitchTimerLists+0xc0>)
 8005308:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <prvSwitchTimerLists+0xc4>)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6013      	str	r3, [r2, #0]
}
 8005310:	bf00      	nop
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000cf0 	.word	0x20000cf0
 800531c:	20000cf4 	.word	0x20000cf4

08005320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005326:	f000 f965 	bl	80055f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800532a:	4b15      	ldr	r3, [pc, #84]	; (8005380 <prvCheckForValidListAndQueue+0x60>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d120      	bne.n	8005374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005332:	4814      	ldr	r0, [pc, #80]	; (8005384 <prvCheckForValidListAndQueue+0x64>)
 8005334:	f7fd fc28 	bl	8002b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005338:	4813      	ldr	r0, [pc, #76]	; (8005388 <prvCheckForValidListAndQueue+0x68>)
 800533a:	f7fd fc25 	bl	8002b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <prvCheckForValidListAndQueue+0x6c>)
 8005340:	4a10      	ldr	r2, [pc, #64]	; (8005384 <prvCheckForValidListAndQueue+0x64>)
 8005342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <prvCheckForValidListAndQueue+0x70>)
 8005346:	4a10      	ldr	r2, [pc, #64]	; (8005388 <prvCheckForValidListAndQueue+0x68>)
 8005348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800534a:	2300      	movs	r3, #0
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <prvCheckForValidListAndQueue+0x74>)
 8005350:	4a11      	ldr	r2, [pc, #68]	; (8005398 <prvCheckForValidListAndQueue+0x78>)
 8005352:	2110      	movs	r1, #16
 8005354:	200a      	movs	r0, #10
 8005356:	f7fd fd33 	bl	8002dc0 <xQueueGenericCreateStatic>
 800535a:	4603      	mov	r3, r0
 800535c:	4a08      	ldr	r2, [pc, #32]	; (8005380 <prvCheckForValidListAndQueue+0x60>)
 800535e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <prvCheckForValidListAndQueue+0x60>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <prvCheckForValidListAndQueue+0x60>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	490b      	ldr	r1, [pc, #44]	; (800539c <prvCheckForValidListAndQueue+0x7c>)
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fc44 	bl	8003bfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005374:	f000 f96e 	bl	8005654 <vPortExitCritical>
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000cf8 	.word	0x20000cf8
 8005384:	20000cc8 	.word	0x20000cc8
 8005388:	20000cdc 	.word	0x20000cdc
 800538c:	20000cf0 	.word	0x20000cf0
 8005390:	20000cf4 	.word	0x20000cf4
 8005394:	20000da4 	.word	0x20000da4
 8005398:	20000d04 	.word	0x20000d04
 800539c:	08005cc4 	.word	0x08005cc4

080053a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3b04      	subs	r3, #4
 80053b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3b04      	subs	r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3b04      	subs	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053d0:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <pxPortInitialiseStack+0x64>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3b14      	subs	r3, #20
 80053da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3b04      	subs	r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f06f 0202 	mvn.w	r2, #2
 80053ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3b20      	subs	r3, #32
 80053f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	08005409 	.word	0x08005409

08005408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005412:	4b12      	ldr	r3, [pc, #72]	; (800545c <prvTaskExitError+0x54>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d00a      	beq.n	8005432 <prvTaskExitError+0x2a>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60fb      	str	r3, [r7, #12]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <prvTaskExitError+0x28>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005446:	bf00      	nop
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0fc      	beq.n	8005448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	2000000c 	.word	0x2000000c

08005460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <pxCurrentTCBConst2>)
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	6808      	ldr	r0, [r1, #0]
 8005466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	f380 8809 	msr	PSP, r0
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	4770      	bx	lr
 800547c:	f3af 8000 	nop.w

08005480 <pxCurrentTCBConst2>:
 8005480:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005488:	4808      	ldr	r0, [pc, #32]	; (80054ac <prvPortStartFirstTask+0x24>)
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f380 8808 	msr	MSP, r0
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8814 	msr	CONTROL, r0
 800549a:	b662      	cpsie	i
 800549c:	b661      	cpsie	f
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	df00      	svc	0
 80054a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054aa:	bf00      	nop
 80054ac:	e000ed08 	.word	0xe000ed08

080054b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054b6:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <xPortStartScheduler+0x120>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a46      	ldr	r2, [pc, #280]	; (80055d4 <xPortStartScheduler+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10a      	bne.n	80054d6 <xPortStartScheduler+0x26>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054d6:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <xPortStartScheduler+0x120>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <xPortStartScheduler+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10a      	bne.n	80054f6 <xPortStartScheduler+0x46>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <xPortStartScheduler+0x12c>)
 80054f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <xPortStartScheduler+0x130>)
 800551c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800551e:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <xPortStartScheduler+0x134>)
 8005520:	2207      	movs	r2, #7
 8005522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005524:	e009      	b.n	800553a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <xPortStartScheduler+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3b01      	subs	r3, #1
 800552c:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <xPortStartScheduler+0x134>)
 800552e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d0ef      	beq.n	8005526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <xPortStartScheduler+0x134>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1c3 0307 	rsb	r3, r3, #7
 800554e:	2b04      	cmp	r3, #4
 8005550:	d00a      	beq.n	8005568 <xPortStartScheduler+0xb8>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60bb      	str	r3, [r7, #8]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <xPortStartScheduler+0x134>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <xPortStartScheduler+0x134>)
 8005570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <xPortStartScheduler+0x134>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <xPortStartScheduler+0x134>)
 800557c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <xPortStartScheduler+0x138>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <xPortStartScheduler+0x138>)
 800558c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005592:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <xPortStartScheduler+0x138>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <xPortStartScheduler+0x138>)
 8005598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800559c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800559e:	f000 f8dd 	bl	800575c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <xPortStartScheduler+0x13c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055a8:	f000 f8fc 	bl	80057a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ac:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <xPortStartScheduler+0x140>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <xPortStartScheduler+0x140>)
 80055b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055b8:	f7ff ff66 	bl	8005488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055bc:	f7fe ff58 	bl	8004470 <vTaskSwitchContext>
	prvTaskExitError();
 80055c0:	f7ff ff22 	bl	8005408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000ed00 	.word	0xe000ed00
 80055d4:	410fc271 	.word	0x410fc271
 80055d8:	410fc270 	.word	0x410fc270
 80055dc:	e000e400 	.word	0xe000e400
 80055e0:	20000df4 	.word	0x20000df4
 80055e4:	20000df8 	.word	0x20000df8
 80055e8:	e000ed20 	.word	0xe000ed20
 80055ec:	2000000c 	.word	0x2000000c
 80055f0:	e000ef34 	.word	0xe000ef34

080055f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <vPortEnterCritical+0x58>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <vPortEnterCritical+0x58>)
 8005616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <vPortEnterCritical+0x58>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10f      	bne.n	8005640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <vPortEnterCritical+0x5c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <vPortEnterCritical+0x4c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	603b      	str	r3, [r7, #0]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <vPortEnterCritical+0x4a>
	}
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	2000000c 	.word	0x2000000c
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <vPortExitCritical+0x50>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <vPortExitCritical+0x24>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	607b      	str	r3, [r7, #4]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <vPortExitCritical+0x50>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <vPortExitCritical+0x50>)
 8005680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <vPortExitCritical+0x42>
 800568a:	2300      	movs	r3, #0
 800568c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	f383 8811 	msr	BASEPRI, r3
}
 8005694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c
	...

080056b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056b0:	f3ef 8009 	mrs	r0, PSP
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <pxCurrentTCBConst>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f01e 0f10 	tst.w	lr, #16
 80056c0:	bf08      	it	eq
 80056c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	6010      	str	r0, [r2, #0]
 80056cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056d4:	f380 8811 	msr	BASEPRI, r0
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f7fe fec6 	bl	8004470 <vTaskSwitchContext>
 80056e4:	f04f 0000 	mov.w	r0, #0
 80056e8:	f380 8811 	msr	BASEPRI, r0
 80056ec:	bc09      	pop	{r0, r3}
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	6808      	ldr	r0, [r1, #0]
 80056f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f6:	f01e 0f10 	tst.w	lr, #16
 80056fa:	bf08      	it	eq
 80056fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005700:	f380 8809 	msr	PSP, r0
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst>:
 8005710:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005732:	f7fe fde3 	bl	80042fc <xTaskIncrementTick>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <xPortSysTickHandler+0x40>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f383 8811 	msr	BASEPRI, r3
}
 800574e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <vPortSetupTimerInterrupt+0x38>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <vPortSetupTimerInterrupt+0x3c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <vPortSetupTimerInterrupt+0x40>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <vPortSetupTimerInterrupt+0x44>)
 800577a:	3b01      	subs	r3, #1
 800577c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <vPortSetupTimerInterrupt+0x34>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000e010 	.word	0xe000e010
 8005794:	e000e018 	.word	0xe000e018
 8005798:	20000000 	.word	0x20000000
 800579c:	10624dd3 	.word	0x10624dd3
 80057a0:	e000e014 	.word	0xe000e014

080057a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057b4 <vPortEnableVFP+0x10>
 80057a8:	6801      	ldr	r1, [r0, #0]
 80057aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ae:	6001      	str	r1, [r0, #0]
 80057b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057b2:	bf00      	nop
 80057b4:	e000ed88 	.word	0xe000ed88

080057b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057be:	f3ef 8305 	mrs	r3, IPSR
 80057c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d914      	bls.n	80057f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ca:	4a17      	ldr	r2, [pc, #92]	; (8005828 <vPortValidateInterruptPriority+0x70>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <vPortValidateInterruptPriority+0x74>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	7afa      	ldrb	r2, [r7, #11]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20a      	bcs.n	80057f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057f4:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <vPortValidateInterruptPriority+0x78>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <vPortValidateInterruptPriority+0x7c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d90a      	bls.n	800581a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	603b      	str	r3, [r7, #0]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <vPortValidateInterruptPriority+0x60>
	}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000e3f0 	.word	0xe000e3f0
 800582c:	20000df4 	.word	0x20000df4
 8005830:	e000ed0c 	.word	0xe000ed0c
 8005834:	20000df8 	.word	0x20000df8

08005838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005844:	f7fe fc9e 	bl	8004184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005848:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <pvPortMalloc+0x180>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005850:	f000 f920 	bl	8005a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <pvPortMalloc+0x184>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 8093 	bne.w	8005988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01d      	beq.n	80058a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005868:	2208      	movs	r2, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f023 0307 	bic.w	r3, r3, #7
 8005880:	3308      	adds	r3, #8
 8005882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <pvPortMalloc+0x6c>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d06e      	beq.n	8005988 <pvPortMalloc+0x150>
 80058aa:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <pvPortMalloc+0x188>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d869      	bhi.n	8005988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <pvPortMalloc+0x18c>)
 80058b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058b8:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x18c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058be:	e004      	b.n	80058ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <pvPortMalloc+0xa4>
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f1      	bne.n	80058c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <pvPortMalloc+0x180>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d050      	beq.n	8005988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2208      	movs	r2, #8
 80058ec:	4413      	add	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	2308      	movs	r3, #8
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	429a      	cmp	r2, r3
 8005906:	d91f      	bls.n	8005948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <pvPortMalloc+0xf8>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	613b      	str	r3, [r7, #16]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f000 f908 	bl	8005b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <pvPortMalloc+0x188>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <pvPortMalloc+0x188>)
 8005954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <pvPortMalloc+0x188>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <pvPortMalloc+0x190>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d203      	bcs.n	800596a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <pvPortMalloc+0x188>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <pvPortMalloc+0x190>)
 8005968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <pvPortMalloc+0x184>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	431a      	orrs	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <pvPortMalloc+0x194>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a11      	ldr	r2, [pc, #68]	; (80059cc <pvPortMalloc+0x194>)
 8005986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005988:	f7fe fc0a 	bl	80041a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <pvPortMalloc+0x174>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <pvPortMalloc+0x172>
	return pvReturn;
 80059ac:	69fb      	ldr	r3, [r7, #28]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20004a04 	.word	0x20004a04
 80059bc:	20004a18 	.word	0x20004a18
 80059c0:	20004a08 	.word	0x20004a08
 80059c4:	200049fc 	.word	0x200049fc
 80059c8:	20004a0c 	.word	0x20004a0c
 80059cc:	20004a10 	.word	0x20004a10

080059d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04d      	beq.n	8005a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059e2:	2308      	movs	r3, #8
 80059e4:	425b      	negs	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <vPortFree+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <vPortFree+0x44>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <vPortFree+0x62>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <vPortFree+0xb8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <vPortFree+0xb8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a58:	f7fe fb94 	bl	8004184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <vPortFree+0xbc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <vPortFree+0xbc>)
 8005a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f000 f874 	bl	8005b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <vPortFree+0xc0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <vPortFree+0xc0>)
 8005a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a7a:	f7fe fb91 	bl	80041a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20004a18 	.word	0x20004a18
 8005a8c:	20004a08 	.word	0x20004a08
 8005a90:	20004a14 	.word	0x20004a14

08005a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <prvHeapInit+0xac>)
 8005aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3307      	adds	r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <prvHeapInit+0xac>)
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <prvHeapInit+0xb0>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <prvHeapInit+0xb0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <prvHeapInit+0xb4>)
 8005af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <prvHeapInit+0xb4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvHeapInit+0xb4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <prvHeapInit+0xb4>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <prvHeapInit+0xb8>)
 8005b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <prvHeapInit+0xbc>)
 8005b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <prvHeapInit+0xc0>)
 8005b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000dfc 	.word	0x20000dfc
 8005b44:	200049fc 	.word	0x200049fc
 8005b48:	20004a04 	.word	0x20004a04
 8005b4c:	20004a0c 	.word	0x20004a0c
 8005b50:	20004a08 	.word	0x20004a08
 8005b54:	20004a18 	.word	0x20004a18

08005b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <prvInsertBlockIntoFreeList+0xac>)
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x14>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d8f7      	bhi.n	8005b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d108      	bne.n	8005b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d118      	bne.n	8005be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d00d      	beq.n	8005bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e008      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d002      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	200049fc 	.word	0x200049fc
 8005c08:	20004a04 	.word	0x20004a04

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4d0d      	ldr	r5, [pc, #52]	; (8005c44 <__libc_init_array+0x38>)
 8005c10:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c12:	1b64      	subs	r4, r4, r5
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	2600      	movs	r6, #0
 8005c18:	42a6      	cmp	r6, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	4d0b      	ldr	r5, [pc, #44]	; (8005c4c <__libc_init_array+0x40>)
 8005c1e:	4c0c      	ldr	r4, [pc, #48]	; (8005c50 <__libc_init_array+0x44>)
 8005c20:	f000 f82e 	bl	8005c80 <_init>
 8005c24:	1b64      	subs	r4, r4, r5
 8005c26:	10a4      	asrs	r4, r4, #2
 8005c28:	2600      	movs	r6, #0
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c34:	4798      	blx	r3
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3e:	4798      	blx	r3
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08005d44 	.word	0x08005d44
 8005c48:	08005d44 	.word	0x08005d44
 8005c4c:	08005d44 	.word	0x08005d44
 8005c50:	08005d48 	.word	0x08005d48

08005c54 <memcpy>:
 8005c54:	440a      	add	r2, r1
 8005c56:	4291      	cmp	r1, r2
 8005c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c5c:	d100      	bne.n	8005c60 <memcpy+0xc>
 8005c5e:	4770      	bx	lr
 8005c60:	b510      	push	{r4, lr}
 8005c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	d1f9      	bne.n	8005c62 <memcpy+0xe>
 8005c6e:	bd10      	pop	{r4, pc}

08005c70 <memset>:
 8005c70:	4402      	add	r2, r0
 8005c72:	4603      	mov	r3, r0
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d100      	bne.n	8005c7a <memset+0xa>
 8005c78:	4770      	bx	lr
 8005c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7e:	e7f9      	b.n	8005c74 <memset+0x4>

08005c80 <_init>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr

08005c8c <_fini>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr
